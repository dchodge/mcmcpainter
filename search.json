[{"path":"https://dchodge.github.io/mcmcpainter/articles/butterfly_mcmc_demo.html","id":"butterfly-mcmc-line-painting-demo","dir":"Articles","previous_headings":"","what":"Butterfly MCMC Line Painting Demo","title":"Butterfly MCMC Line Painting Demo","text":"vignette demonstrates complete workflow generating line paintings using mcmcPainter package, featuring beautiful butterfly.png image 100,000 MCMC iterations maximum detail quality.","code":""},{"path":"https://dchodge.github.io/mcmcpainter/articles/butterfly_mcmc_demo.html","id":"image-analysis","dir":"Articles","previous_headings":"Butterfly MCMC Line Painting Demo","what":"🦋 Image Analysis","title":"Butterfly MCMC Line Painting Demo","text":"First, let’s analyze butterfly image understand characteristics:","code":"# Load package functions source(\"../R/mcmcPainter.R\") source(\"../R/mcmc_core.R\")  source(\"../R/utilities.R\")  # Analyze the butterfly image image_path <- \"../inst/extdata/butterfly.png\" cat(\"Analyzing image:\", basename(image_path), \"\\n\") ## Analyzing image: butterfly.png cat(\"=====================================\\n\") ## ===================================== img_info <- get_image_info(image_path) cat(\"File:\", basename(image_path), \"\\n\") ## File: butterfly.png cat(\"Original dimensions:\", img_info$width, \"x\", img_info$height, \"pixels\\n\") ## Original dimensions: 2068 x 2091 pixels cat(\"File size:\", round(img_info$file_size / 1024, 1), \"KB\\n\") ## File size: 4254.8 KB cat(\"PNG verification:\", ifelse(img_info$is_true_png, \"✓ True PNG\", \"✗ Not a true PNG\"), \"\\n\") ## PNG verification: ✓ True PNG cat(\"Aspect ratio:\", round(img_info$width / img_info$height, 3), \"\\n\") ## Aspect ratio: 0.989 cat(\"Total pixels:\", format(img_info$width * img_info$height, big.mark = \",\"), \"\\n\\n\") ## Total pixels: 4,324,188 # Display the original image library(magick) butterfly_img <- image_read(image_path) image_info <- image_info(butterfly_img) cat(\"Magick image info:\\n\") ## Magick image info: cat(\"Dimensions:\", image_info$width, \"x\", image_info$height, \"\\n\") ## Dimensions: 2068 x 2091 cat(\"Format:\", image_info$format, \"\\n\") ## Format: PNG cat(\"Colorspace:\", image_info$colorspace, \"\\n\") ## Colorspace: sRGB cat(\"Filesize:\", round(image_info$filesize / 1024, 1), \"KB\\n\\n\") ## Filesize: 4254.8 KB"},{"path":"https://dchodge.github.io/mcmcpainter/articles/butterfly_mcmc_demo.html","id":"mcmc-configuration","dir":"Articles","previous_headings":"Butterfly MCMC Line Painting Demo","what":"🎯 MCMC Configuration","title":"Butterfly MCMC Line Painting Demo","text":"Now let’s configure MCMC parameters optimal performance butterfly image:","code":"# High-quality configuration for 100K steps cat(\"High-Quality MCMC Configuration:\\n\") ## High-Quality MCMC Configuration: cat(\"================================\\n\") ## ================================ cat(\"Target iterations: 100,000\\n\") ## Target iterations: 100,000 cat(\"Save frequency: Every 5,000 iterations\\n\") ## Save frequency: Every 5,000 iterations cat(\"Max dimension: 1200 (high resolution)\\n\") ## Max dimension: 1200 (high resolution) cat(\"Expected runtime: 3-5 hours (depending on system)\\n\\n\") ## Expected runtime: 3-5 hours (depending on system) # Auto-configure MCMC parameters config <- auto_configure_mcmc(   image_path = image_path,   max_dimension = 1200,        # High resolution   target_iterations = 100000    # 100K iterations ) ## Image Analysis: ## ============== ## File: butterfly.png  ## Original dimensions: 2068 x 2091 pixels ## File size: 4254.8 KB ## PNG verification: ✓ True PNG  ##  ## Optimized MCMC Parameters: ## ========================== ## Scaled dimensions: 1187 x 1200 pixels ## Scaling factor: 0.574  ## Adjusted iterations: 149185  ## Save frequency: 7459 cat(\"Optimized MCMC Parameters:\\n\") ## Optimized MCMC Parameters: cat(\"==========================\\n\") ## ========================== cat(\"Original dimensions:\", config$original_width, \"x\", config$original_height, \"\\n\") ## Original dimensions: 2068 x 2091 cat(\"Scaled dimensions:\", config$scaled_width, \"x\", config$scaled_height, \"\\n\") ## Scaled dimensions: 1187 x 1200 cat(\"Scaling factor:\", round(config$scale_factor, 3), \"\\n\") ## Scaling factor: 0.574 cat(\"Adjusted iterations:\", format(config$iterations, big.mark = \",\"), \"\\n\") ## Adjusted iterations: 149,185 cat(\"Save frequency:\", format(config$save_every, big.mark = \",\"), \"\\n\") ## Save frequency: 7,459 cat(\"PNG verification:\", ifelse(config$is_true_png, \"✓ True PNG\", \"✗ Not a true PNG\"), \"\\n\\n\") ## PNG verification: ✓ True PNG # Calculate complexity metrics original_pixels <- config$original_width * config$original_height scaled_pixels <- config$scaled_width * config$scaled_height complexity_reduction <- (1 - scaled_pixels / original_pixels) * 100  cat(\"Complexity Analysis:\\n\") ## Complexity Analysis: cat(\"===================\\n\") ## =================== cat(\"Original pixels:\", format(original_pixels, big.mark = \",\"), \"\\n\") ## Original pixels: 4,324,188 cat(\"Scaled pixels:\", format(scaled_pixels, big.mark = \",\"), \"\\n\") ## Scaled pixels: 1,424,400 cat(\"Complexity reduction:\", round(complexity_reduction, 1), \"%\\n\") ## Complexity reduction: 67.1 % cat(\"Memory usage:\", round(scaled_pixels * 3 * 8 / 1024 / 1024, 1), \"MB\\n\\n\") ## Memory usage: 32.6 MB"},{"path":"https://dchodge.github.io/mcmcpainter/articles/butterfly_mcmc_demo.html","id":"running-the-mcmc-algorithm","dir":"Articles","previous_headings":"Butterfly MCMC Line Painting Demo","what":"🚀 Running the MCMC Algorithm","title":"Butterfly MCMC Line Painting Demo","text":"Now let’s run MCMC algorithm generate line painting. take several hours 100K iterations:","code":"# Compile the C++ code for performance cat(\"Compiling C++ code...\\n\") Rcpp::sourceCpp(\"../src/mcmc_painter_cpp.cpp\") cat(\"C++ code compiled successfully!\\n\\n\")  # Run MCMC with high-quality settings cat(\"Starting high-quality MCMC run for butterfly...\\n\") cat(\"This will take several hours. Progress will be saved every 5,000 iterations.\\n\\n\")  res <- run_line_painter(   image_path = image_path,   max_dimension = 1200,        # High resolution   iters = 100000,              # 100K iterations   out_dir = \"../inst/results/butterfly_100k_high_quality\",   seed = 42,   auto_config = TRUE,          # Enable auto-configuration   verbose = TRUE )  cat(\"\\n🎉 MCMC completed successfully!\\n\") cat(\"===============================\\n\") cat(\"Final number of lines:\", length(res$lines), \"\\n\") cat(\"Best iteration:\", res$best$iter, \"\\n\") cat(\"Best SSE:\", round(res$best$sse, 2), \"\\n\")"},{"path":"https://dchodge.github.io/mcmcpainter/articles/butterfly_mcmc_demo.html","id":"results-analysis","dir":"Articles","previous_headings":"Butterfly MCMC Line Painting Demo","what":"📊 Results Analysis","title":"Butterfly MCMC Line Painting Demo","text":"MCMC completes, let’s analyze results:","code":"# Load the final image with the same dimensions used in MCMC target_img <- load_image_rgb(image_path,                              out_w = res$canvas %>% dim() %>% .[2],                              out_h = res$canvas %>% dim() %>% .[1])  # Create default white canvas H <- dim(target_img)[1] W <- dim(target_img)[2] default_canvas <- array(1, dim = c(H, W, 3))  # Calculate performance metrics sse <- sum((target_img - res$best$canvas)^2) mse <- sse / length(target_img) psnr <- 20 * log10(1 / sqrt(mse))  cat(\"Performance Metrics:\\n\") cat(\"==================\\n\") cat(\"Best SSE:\", round(sse, 2), \"\\n\") cat(\"Best MSE:\", round(mse, 6), \"\\n\") cat(\"Best PSNR:\", round(psnr, 2), \"dB\\n\") cat(\"Number of lines:\", length(res$lines), \"\\n\") cat(\"Final dimensions:\", W, \"x\", H, \"\\n\\n\")  # Display optimization summary cat(\"Optimization Summary:\\n\") cat(\"====================\\n\") cat(\"Original dimensions:\", config$original_width, \"x\", config$original_height, \"\\n\") cat(\"Final dimensions:\", W, \"x\", H, \"\\n\") cat(\"Total iterations:\", 100000, \"\\n\") cat(\"Save frequency:\", 5000, \"\\n\") cat(\"PNG verification:\", ifelse(config$is_true_png, \"✓ True PNG\", \"✗ Not a true PNG\"), \"\\n\")"},{"path":"https://dchodge.github.io/mcmcpainter/articles/butterfly_mcmc_demo.html","id":"triptych-visualization","dir":"Articles","previous_headings":"Butterfly MCMC Line Painting Demo","what":"🎨 Triptych Visualization","title":"Butterfly MCMC Line Painting Demo","text":"Create beautiful triptych showing progression white canvas final artwork:","code":"# Create triptych create_triptych(   default_canvas = default_canvas,   best_canvas = res$best$canvas,   target_img = target_img,   titles = c(\"Default (White Canvas)\", \"Best MCMC Result (100K steps)\", \"True Butterfly Image\"),   main_title = \"Butterfly Image: 100K MCMC Progression\" )  # Save triptych in multiple formats cat(\"Saving triptych...\\n\") output_dir <- \"../inst/results/butterfly_100k_high_quality\"  # Save as PDF pdf_path <- file.path(output_dir, \"butterfly_100k_triptych.pdf\") save_triptych(   default_canvas = default_canvas,   best_canvas = res$best$canvas,   target_img = target_img,   output_path = pdf_path,   width = 18, height = 7,  # Larger for high-quality output   titles = c(\"Default (White Canvas)\", \"Best MCMC Result (100K steps)\", \"True Butterfly Image\"),   main_title = \"Butterfly Image: 100K MCMC Progression\",   format = \"pdf\" )  # Save as PNG png_path <- file.path(output_dir, \"butterfly_100k_triptych.png\") save_triptych(   default_canvas = default_canvas,   best_canvas = res$best$canvas,   target_img = target_img,   output_path = png_path,   width = 18, height = 7,  # Larger for high-quality output   titles = c(\"Default (White Canvas)\", \"Best MCMC Result (100K steps)\", \"True Butterfly Image\"),   main_title = \"Butterfly Image: 100K MCMC Progression\",   format = \"png\" )  cat(\"Triptych saved successfully!\\n\") cat(\"Files created:\\n\") cat(\"- PDF:\", pdf_path, \"\\n\") cat(\"- PNG:\", png_path, \"\\n\")"},{"path":"https://dchodge.github.io/mcmcpainter/articles/butterfly_mcmc_demo.html","id":"output-files","dir":"Articles","previous_headings":"Butterfly MCMC Line Painting Demo","what":"📁 Output Files","title":"Butterfly MCMC Line Painting Demo","text":"MCMC run generate several output files:","code":"# List all saved iterations cat(\"Saved Iterations:\\n\") cat(\"=================\\n\") iter_files <- list.files(output_dir, pattern = \"iter_.*\\\\.png\", full.names = FALSE) iter_files <- sort(iter_files) for (file in iter_files) {   cat(\"-\", file, \"\\n\") }  cat(\"\\nFinal Output Files:\\n\") cat(\"==================\\n\") cat(\"- Best canvas: best_canvas.png\\n\") cat(\"- Final lines: final_lines.RData\\n\") cat(\"- Triptych PDF: butterfly_100k_triptych.pdf\\n\") cat(\"- Triptych PNG: butterfly_100k_triptych.png\\n\") cat(\"- Progress log: mcmc_progress.log\\n\")"},{"path":"https://dchodge.github.io/mcmcpainter/articles/butterfly_mcmc_demo.html","id":"progression-analysis","dir":"Articles","previous_headings":"Butterfly MCMC Line Painting Demo","what":"🔍 Progression Analysis","title":"Butterfly MCMC Line Painting Demo","text":"Let’s examine MCMC progresses 100K iterations:","code":"# Load saved iterations for analysis library(png) library(grid)  # Function to load and display progression show_progression <- function(iterations = c(0, 25000, 50000, 75000, 100000)) {   par(mfrow = c(2, 3), mar = c(2, 2, 2, 1))      for (iter in iterations) {     if (iter == 0) {       # Show white canvas       img <- array(1, dim = c(H, W, 3))       title <- \"Iteration 0 (White)\"     } else {       # Load saved iteration       file_path <- file.path(output_dir, paste0(\"iter_\", sprintf(\"%06d\", iter), \".png\"))       if (file.exists(file_path)) {         img <- readPNG(file_path)         title <- paste(\"Iteration\", format(iter, big.mark = \",\"))       } else {         next       }     }          plot.new()     rasterImage(img, 0, 0, 1, 1)     title(title, cex.main = 0.8)   }      # Show target image   plot.new()   rasterImage(target_img, 0, 0, 1, 1)   title(\"Target Image\", cex.main = 0.8)      par(mfrow = c(1, 1)) }  # Display progression (if files exist) if (dir.exists(output_dir)) {   show_progression() }"},{"path":"https://dchodge.github.io/mcmcpainter/articles/butterfly_mcmc_demo.html","id":"performance-comparison","dir":"Articles","previous_headings":"Butterfly MCMC Line Painting Demo","what":"📈 Performance Comparison","title":"Butterfly MCMC Line Painting Demo","text":"Compare butterfly results images:","code":"# Performance comparison table comparison_data <- data.frame(   Image = c(\"Butterfly\", \"Leaf\", \"Iamami\"),   Dimensions = c(     paste(config$scaled_width, \"x\", config$scaled_height),     \"800 x 1422\",      \"788 x 605\"   ),   Iterations = c(100000, 20000, 100000),   File_Size_KB = c(     round(config$file_size / 1024, 1),     132,     336   ),   Complexity = c(     \"High (4.2MB)\",     \"Medium (132KB)\",      \"Medium (336KB)\"   ) )  knitr::kable(comparison_data,               caption = \"Performance Comparison Across Images\",              align = c('l', 'c', 'c', 'c', 'l'))"},{"path":[]},{"path":"https://dchodge.github.io/mcmcpainter/articles/butterfly_mcmc_demo.html","id":"why-100k-iterations-for-butterfly","dir":"Articles","previous_headings":"Butterfly MCMC Line Painting Demo > 🎯 Key Insights","what":"Why 100K Iterations for Butterfly?","title":"Butterfly MCMC Line Painting Demo","text":"High Complexity: butterfly image intricate wing patterns fine details Large File Size: 4.2MB indicates rich texture color variation Fine Details: Wings, antennae, body require precise line placement Color Gradients: Smooth transitions need many thin, overlapping strokes","code":""},{"path":"https://dchodge.github.io/mcmcpainter/articles/butterfly_mcmc_demo.html","id":"expected-results","dir":"Articles","previous_headings":"Butterfly MCMC Line Painting Demo > 🎯 Key Insights","what":"Expected Results","title":"Butterfly MCMC Line Painting Demo","text":"Line Count: 500-1000+ lines full detail Quality: Near-photorealistic line painting Convergence: Stable improvement 100K steps Memory: Efficient bounding box updates performance","code":""},{"path":"https://dchodge.github.io/mcmcpainter/articles/butterfly_mcmc_demo.html","id":"running-the-full-demo","dir":"Articles","previous_headings":"Butterfly MCMC Line Painting Demo","what":"🚀 Running the Full Demo","title":"Butterfly MCMC Line Painting Demo","text":"run complete 100K MCMC demo:","code":"# Option 1: Run the vignette rmarkdown::render(\"vignettes/butterfly_mcmc_demo.Rmd\")  # Option 2: Run directly in R source(\"vignettes/butterfly_mcmc_demo.Rmd\")  # Option 3: Use the standalone script source(\"create_butterfly_triptych.R\")"},{"path":"https://dchodge.github.io/mcmcpainter/articles/butterfly_mcmc_demo.html","id":"further-reading","dir":"Articles","previous_headings":"Butterfly MCMC Line Painting Demo","what":"📚 Further Reading","title":"Butterfly MCMC Line Painting Demo","text":"Package Documentation: ?mcmcPainter Core Functions: ?run_line_painter, ?create_triptych Utilities: ?get_image_info, ?auto_configure_mcmc Vignettes: See image demos comparison Note: 100K MCMC run take 3-5 hours depending system. results show full artistic potential algorithm complex, detailed images like butterfly! 🦋✨","code":""},{"path":"https://dchodge.github.io/mcmcpainter/articles/iamami_mcmc_demo.html","id":"mcmc-line-painting-demo-iamami-image","dir":"Articles","previous_headings":"","what":"MCMC Line Painting Demo: Iamami Image","title":"MCMC Line Painting Demo: Iamami Image","text":"vignette demonstrates complete workflow generating line paintings using MCMC Art package, featuring automatic image analysis parameter optimization iamami.png image.","code":""},{"path":"https://dchodge.github.io/mcmcpainter/articles/iamami_mcmc_demo.html","id":"setup","dir":"Articles","previous_headings":"MCMC Line Painting Demo: Iamami Image","what":"Setup","title":"MCMC Line Painting Demo: Iamami Image","text":"First, let’s load package compile C++ code:","code":"# Load the package functions source(\"../R/mcmcPainter.R\") source(\"../R/mcmc_core.R\")  source(\"../R/utilities.R\")  # Compile the C++ code for performance cat(\"Compiling C++ code...\\n\") ## Compiling C++ code... Rcpp::sourceCpp(\"../src/mcmc_painter_cpp.cpp\") cat(\"C++ code compiled successfully!\\n\\n\") ## C++ code compiled successfully!"},{"path":"https://dchodge.github.io/mcmcpainter/articles/iamami_mcmc_demo.html","id":"automatic-image-analysis","dir":"Articles","previous_headings":"MCMC Line Painting Demo: Iamami Image","what":"Automatic Image Analysis","title":"MCMC Line Painting Demo: Iamami Image","text":"Let’s use new automatic image analysis function examine iamami.png image:","code":"# Analyze the iamami image automatically image_path <- \"../inst/extdata/iamami.png\" img_analysis <- auto_configure_mcmc(image_path, max_dimension = 800, target_iterations = 20000) ## Image Analysis: ## ============== ## File: iamami.png  ## Original dimensions: 788 x 605 pixels ## File size: 336 KB ## PNG verification: ✓ True PNG  ##  ## Optimized MCMC Parameters: ## ========================== ## Scaled dimensions: 788 x 605 pixels ## Scaling factor: 1  ## Adjusted iterations: 20000  ## Save frequency: 1000 # Display the analysis results cat(\"\\nImage Analysis Summary:\\n\") ##  ## Image Analysis Summary: cat(\"======================\\n\") ## ====================== cat(\"File:\", basename(image_path), \"\\n\") ## File: iamami.png cat(\"Original dimensions:\", img_analysis$original_width, \"x\", img_analysis$original_height, \"pixels\\n\") ## Original dimensions: 788 x 605 pixels cat(\"Scaled dimensions:\", img_analysis$scaled_width, \"x\", img_analysis$scaled_height, \"pixels\\n\") ## Scaled dimensions: 788 x 605 pixels cat(\"PNG verification:\", ifelse(img_analysis$is_true_png, \"✓ True PNG\", \"✗ Not a true PNG\"), \"\\n\") ## PNG verification: ✓ True PNG cat(\"Recommended iterations:\", img_analysis$iterations, \"\\n\") ## Recommended iterations: 20000 cat(\"Save frequency:\", img_analysis$save_every, \"\\n\") ## Save frequency: 1000"},{"path":"https://dchodge.github.io/mcmcpainter/articles/iamami_mcmc_demo.html","id":"load-and-display-target-image","dir":"Articles","previous_headings":"MCMC Line Painting Demo: Iamami Image","what":"Load and Display Target Image","title":"MCMC Line Painting Demo: Iamami Image","text":"Now let’s load image optimized dimensions:","code":"# Load the target iamami image with optimized dimensions target_img <- load_image_rgb(image_path,                              out_w = img_analysis$scaled_width,                              out_h = img_analysis$scaled_height)  # Display image properties cat(\"Loaded image dimensions:\", dim(target_img)[2], \"x\", dim(target_img)[1], \"pixels\\n\") ## Loaded image dimensions: 788 x 605 pixels cat(\"Image range:\", range(target_img), \"\\n\") ## Image range: 0 1 # Display the original image view_rgb(target_img)"},{"path":"https://dchodge.github.io/mcmcpainter/articles/iamami_mcmc_demo.html","id":"run-mcmc-with-optimized-parameters","dir":"Articles","previous_headings":"MCMC Line Painting Demo: Iamami Image","what":"Run MCMC with Optimized Parameters","title":"MCMC Line Painting Demo: Iamami Image","text":"Now let’s run MCMC algorithm using automatically configured parameters: Note: MCMC run set eval=FALSE avoid running vignette compilation. practice, run generate artwork.","code":"# Run MCMC with automatically configured parameters cat(\"Starting MCMC run with optimized parameters...\\n\") cat(\"Iterations:\", img_analysis$iterations, \"\\n\") cat(\"Dimensions:\", img_analysis$scaled_width, \"x\", img_analysis$scaled_height, \"\\n\") cat(\"This may take several minutes depending on your system.\\n\\n\")  res <- run_line_painter(   image_path = image_path,   width = img_analysis$scaled_width,    height = img_analysis$scaled_height,   iters = img_analysis$iterations,   out_dir = \"inst/results/iamami_optimized\",   seed = 42 )  cat(\"\\nMCMC completed successfully!\\n\") cat(\"Final number of lines:\", length(res$lines), \"\\n\") cat(\"Best iteration:\", res$best$iter, \"\\n\") cat(\"Best SSE:\", round(res$best$sse, 2), \"\\n\")"},{"path":"https://dchodge.github.io/mcmcpainter/articles/iamami_mcmc_demo.html","id":"create-triptych-visualization","dir":"Articles","previous_headings":"MCMC Line Painting Demo: Iamami Image","what":"Create Triptych Visualization","title":"MCMC Line Painting Demo: Iamami Image","text":"Let’s create beautiful triptych showing progression default canvas final result:","code":"# Function to create triptych create_triptych <- function(default_canvas, best_canvas, target_img,                             titles = c(\"Default (White Canvas)\", \"Best MCMC Result\", \"True Image\")) {      # Set up the plotting area   par(mfrow = c(1, 3), mar = c(2, 2, 3, 2), oma = c(0, 0, 2, 0))      # Plot 1: Default white canvas   plot.new()   rasterImage(default_canvas, 0, 0, 1, 1)   title(main = titles[1], cex.main = 1.2, font.main = 2)      # Plot 2: Best MCMC result   plot.new()   rasterImage(best_canvas, 0, 0, 1, 1)   title(main = titles[2], cex.main = 1.2, font.main = 2)      # Plot 3: True target image   plot.new()   rasterImage(target_img, 0, 0, 1, 1)   title(main = titles[3], cex.main = 1.2, font.main = 2)      # Overall title   mtext(\"MCMC Line Painting: Iamami Image Progression\",          outer = TRUE, line = 0, cex = 1.5, font = 2) }  # Create default white canvas H <- dim(target_img)[1] W <- dim(target_img)[2] default_canvas <- array(1, dim = c(H, W, 3))  # White background  # For demonstration, we'll use a simulated best result # In practice, this would be res$best$canvas from the MCMC run set.seed(42) simulated_best <- default_canvas + array(rnorm(H * W * 3, 0, 0.1), dim = c(H, W, 3)) simulated_best <- pmin(pmax(simulated_best, 0), 1)  # Create the triptych create_triptych(default_canvas, simulated_best, target_img)"},{"path":"https://dchodge.github.io/mcmcpainter/articles/iamami_mcmc_demo.html","id":"advanced-image-analysis","dir":"Articles","previous_headings":"MCMC Line Painting Demo: Iamami Image","what":"Advanced Image Analysis","title":"MCMC Line Painting Demo: Iamami Image","text":"Let’s explore detailed information image:","code":"# Detailed image analysis detailed_analysis <- function(image_path) {   # Get basic info   img_info <- get_image_info(image_path)      # Load image for additional analysis   img <- magick::image_read(image_path)      cat(\"Detailed Image Analysis:\\n\")   cat(\"=======================\\n\")   cat(\"File:\", basename(image_path), \"\\n\")   cat(\"File size:\", round(img_info$file_size / 1024, 1), \"KB\\n\")   cat(\"Dimensions:\", img_info$width, \"x\", img_info$height, \"pixels\\n\")   cat(\"Total pixels:\", format(img_info$width * img_info$height, big.mark = \",\"), \"\\n\")   cat(\"Aspect ratio:\", round(img_info$width / img_info$height, 3), \"\\n\")   cat(\"PNG verification:\", ifelse(img_info$is_true_png, \"✓ True PNG\", \"✗ Not a true PNG\"), \"\\n\")      # Image format information   cat(\"\\nImage Format Details:\\n\")   cat(\"====================\\n\")   cat(\"File extension:\", img_info$file_extension, \"\\n\")   cat(\"Magick format:\", magick::image_info(img)$format, \"\\n\")   cat(\"Color space:\", magick::image_info(img)$colorspace, \"\\n\")   cat(\"Depth:\", magick::image_info(img)$depth, \"bit\\n\")      return(img_info) }  # Run detailed analysis detailed_info <- detailed_analysis(image_path) ## Detailed Image Analysis: ## ======================= ## File: iamami.png  ## File size: 336 KB ## Dimensions: 788 x 605 pixels ## Total pixels: 476,740  ## Aspect ratio: 1.302  ## PNG verification: ✓ True PNG  ##  ## Image Format Details: ## ==================== ## File extension: png  ## Magick format: PNG  ## Color space: sRGB  ## Depth: bit"},{"path":"https://dchodge.github.io/mcmcpainter/articles/iamami_mcmc_demo.html","id":"performance-optimization-insights","dir":"Articles","previous_headings":"MCMC Line Painting Demo: Iamami Image","what":"Performance Optimization Insights","title":"MCMC Line Painting Demo: Iamami Image","text":"Let’s understand automatic configuration optimizes performance:","code":"# Performance optimization analysis performance_analysis <- function(img_analysis) {   cat(\"Performance Optimization Analysis:\\n\")   cat(\"================================\\n\")      # Original vs scaled complexity   original_pixels <- img_analysis$original_width * img_analysis$original_height   scaled_pixels <- img_analysis$scaled_width * img_analysis$scaled_height      cat(\"Original image complexity:\", format(original_pixels, big.mark = \",\"), \"pixels\\n\")   cat(\"Scaled image complexity:\", format(scaled_pixels, big.mark = \",\"), \"pixels\\n\")   cat(\"Complexity reduction:\", round((1 - scaled_pixels/original_pixels) * 100, 1), \"%\\n\")      # Iteration scaling rationale   cat(\"\\nIteration Scaling Rationale:\\n\")   cat(\"============================\\n\")   cat(\"Base iterations:\", 20000, \"\\n\")   cat(\"Adjusted iterations:\", img_analysis$iterations, \"\\n\")   cat(\"Scaling factor:\", round(img_analysis$iterations / 20000, 2), \"x\\n\")      # Memory and time estimates   cat(\"\\nResource Estimates:\\n\")   cat(\"==================\\n\")   estimated_memory_mb <- round(scaled_pixels * 3 * 8 / (1024 * 1024), 1)   estimated_time_min <- round(img_analysis$iterations / 1000, 1)      cat(\"Estimated memory usage:\", estimated_memory_mb, \"MB\\n\")   cat(\"Estimated runtime:\", estimated_time_min, \"minutes\\n\")   cat(\"Save frequency:\", img_analysis$save_every, \"iterations\\n\") }  # Run performance analysis performance_analysis(img_analysis) ## Performance Optimization Analysis: ## ================================ ## Original image complexity: 476,740 pixels ## Scaled image complexity: 476,740 pixels ## Complexity reduction: 0 % ##  ## Iteration Scaling Rationale: ## ============================ ## Base iterations: 20000  ## Adjusted iterations: 20000  ## Scaling factor: 1 x ##  ## Resource Estimates: ## ================== ## Estimated memory usage: 10.9 MB ## Estimated runtime: 20 minutes ## Save frequency: 1000 iterations"},{"path":"https://dchodge.github.io/mcmcpainter/articles/iamami_mcmc_demo.html","id":"customization-options","dir":"Articles","previous_headings":"MCMC Line Painting Demo: Iamami Image","what":"Customization Options","title":"MCMC Line Painting Demo: Iamami Image","text":"Let’s explore customize automatic configuration:","code":"# Customization examples customization_examples <- function(image_path) {   cat(\"Customization Examples:\\n\")   cat(\"======================\\n\")      # Example 1: High resolution   cat(\"\\n1. High Resolution (max_dimension = 1200):\\n\")   high_res <- auto_configure_mcmc(image_path, max_dimension = 1200, target_iterations = 30000)   cat(\"   Scaled dimensions:\", high_res$scaled_width, \"x\", high_res$scaled_height, \"\\n\")   cat(\"   Iterations:\", high_res$iterations, \"\\n\")      # Example 2: Quick demo   cat(\"\\n2. Quick Demo (max_dimension = 400):\\n\")   quick_demo <- auto_configure_mcmc(image_path, max_dimension = 400, target_iterations = 5000)   cat(\"   Scaled dimensions:\", quick_demo$scaled_width, \"x\", quick_demo$scaled_height, \"\\n\")   cat(\"   Iterations:\", quick_demo$iterations, \"\\n\")      # Example 3: Ultra high quality   cat(\"\\n3. Ultra High Quality (max_dimension = 1600):\\n\")   ultra_hq <- auto_configure_mcmc(image_path, max_dimension = 1600, target_iterations = 50000)   cat(\"   Scaled dimensions:\", ultra_hq$scaled_width, \"x\", ultra_hq$scaled_height, \"\\n\")   cat(\"   Iterations:\", ultra_hq$iterations, \"\\n\") }  # Run customization examples customization_examples(image_path) ## Customization Examples: ## ====================== ##  ## 1. High Resolution (max_dimension = 1200): ## Image Analysis: ## ============== ## File: iamami.png  ## Original dimensions: 788 x 605 pixels ## File size: 336 KB ## PNG verification: ✓ True PNG  ##  ## Optimized MCMC Parameters: ## ========================== ## Scaled dimensions: 788 x 605 pixels ## Scaling factor: 1  ## Adjusted iterations: 30000  ## Save frequency: 1500  ##    Scaled dimensions: 788 x 605  ##    Iterations: 30000  ##  ## 2. Quick Demo (max_dimension = 400): ## Image Analysis: ## ============== ## File: iamami.png  ## Original dimensions: 788 x 605 pixels ## File size: 336 KB ## PNG verification: ✓ True PNG  ##  ## Optimized MCMC Parameters: ## ========================== ## Scaled dimensions: 400 x 307 pixels ## Scaling factor: 0.508  ## Adjusted iterations: 5000  ## Save frequency: 1000  ##    Scaled dimensions: 400 x 307  ##    Iterations: 5000  ##  ## 3. Ultra High Quality (max_dimension = 1600): ## Image Analysis: ## ============== ## File: iamami.png  ## Original dimensions: 788 x 605 pixels ## File size: 336 KB ## PNG verification: ✓ True PNG  ##  ## Optimized MCMC Parameters: ## ========================== ## Scaled dimensions: 788 x 605 pixels ## Scaling factor: 1  ## Adjusted iterations: 50000  ## Save frequency: 2500  ##    Scaled dimensions: 788 x 605  ##    Iterations: 50000"},{"path":"https://dchodge.github.io/mcmcpainter/articles/iamami_mcmc_demo.html","id":"summary","dir":"Articles","previous_headings":"MCMC Line Painting Demo: Iamami Image","what":"Summary","title":"MCMC Line Painting Demo: Iamami Image","text":"vignette demonstrates enhanced MCMC Art package automatic image analysis parameter optimization: Automatic Analysis: get_image_info() auto_configure_mcmc() functions PNG Verification: True PNG detection vs. renamed files Smart Scaling: Automatic dimension optimization Performance Tuning: Iteration count adjustment based image complexity Customization: Easy parameter adjustment different use cases","code":""},{"path":"https://dchodge.github.io/mcmcpainter/articles/iamami_mcmc_demo.html","id":"next-steps","dir":"Articles","previous_headings":"MCMC Line Painting Demo: Iamami Image","what":"Next Steps","title":"MCMC Line Painting Demo: Iamami Image","text":"run vignette real results: Uncomment MCMC execution chunk Run vignette generate artwork Explore results output directory Experiment different max_dimension target_iterations values automatic configuration system makes easy optimize MCMC parameters image, ensuring best balance quality performance.","code":""},{"path":"https://dchodge.github.io/mcmcpainter/articles/leaf_mcmc_demo.html","id":"mcmc-line-painting-demo-leaf-image","dir":"Articles","previous_headings":"","what":"MCMC Line Painting Demo: Leaf Image","title":"MCMC Line Painting Demo: Leaf Image","text":"vignette demonstrates complete workflow generating line paintings using MCMC Art package. ’ll: Load prepare target image Run MCMC 20,000 iterations Create triptych showing progression default final result","code":""},{"path":"https://dchodge.github.io/mcmcpainter/articles/leaf_mcmc_demo.html","id":"setup","dir":"Articles","previous_headings":"MCMC Line Painting Demo: Leaf Image","what":"Setup","title":"MCMC Line Painting Demo: Leaf Image","text":"First, let’s load package compile C++ code:","code":"# Load the package functions source(\"../R/mcmcPainter.R\") source(\"../R/mcmc_core.R\")  source(\"../R/utilities.R\")  # Compile the C++ code for performance cat(\"Compiling C++ code...\\n\") ## Compiling C++ code... Rcpp::sourceCpp(\"../src/mcmc_painter_cpp.cpp\") cat(\"C++ code compiled successfully!\\n\\n\") ## C++ code compiled successfully!"},{"path":"https://dchodge.github.io/mcmcpainter/articles/leaf_mcmc_demo.html","id":"load-target-image","dir":"Articles","previous_headings":"MCMC Line Painting Demo: Leaf Image","what":"Load Target Image","title":"MCMC Line Painting Demo: Leaf Image","text":"Let’s load leaf image examine properties:","code":"# Load the target leaf image target_img <- load_image_rgb(\"../inst/extdata/leaf_converted.png\")  # Display image properties cat(\"Image dimensions:\", dim(target_img)[2], \"x\", dim(target_img)[1], \"pixels\\n\") ## Image dimensions: 256 x 256 pixels cat(\"Image range:\", range(target_img), \"\\n\") ## Image range: 0 1 # Display the original image view_rgb(target_img)"},{"path":"https://dchodge.github.io/mcmcpainter/articles/leaf_mcmc_demo.html","id":"run-mcmc-for-20000-steps","dir":"Articles","previous_headings":"MCMC Line Painting Demo: Leaf Image","what":"Run MCMC for 20,000 Steps","title":"MCMC Line Painting Demo: Leaf Image","text":"Now let’s run MCMC algorithm generate line painting: Note: MCMC run set eval=FALSE avoid running vignette compilation. practice, run generate artwork.","code":"# Run MCMC for 20,000 iterations cat(\"Starting MCMC run for 20,000 iterations...\\n\") cat(\"This may take several minutes depending on your system.\\n\\n\")  res <- run_line_painter(   image_path = \"../inst/extdata/leaf_converted.png\",   width = 800,    height = 1422,   iters = 20000,   out_dir = \"../inst/results/leaf_vignette_20k\",   seed = 42,   save_every = 2000  # Save every 2000 iterations )  cat(\"\\nMCMC completed successfully!\\n\") cat(\"Final number of lines:\", length(res$lines), \"\\n\") cat(\"Best iteration:\", res$best$iter, \"\\n\") cat(\"Best SSE:\", round(res$best$sse, 2), \"\\n\")"},{"path":"https://dchodge.github.io/mcmcpainter/articles/leaf_mcmc_demo.html","id":"create-triptych-visualization","dir":"Articles","previous_headings":"MCMC Line Painting Demo: Leaf Image","what":"Create Triptych Visualization","title":"MCMC Line Painting Demo: Leaf Image","text":"Let’s create beautiful triptych showing progression default canvas final result:","code":"# Function to create triptych create_triptych <- function(default_canvas, best_canvas, target_img,                             titles = c(\"Default (White Canvas)\", \"Best MCMC Result\", \"True Image\")) {      # Set up the plotting area   par(mfrow = c(1, 3), mar = c(2, 2, 3, 2), oma = c(0, 0, 2, 0))      # Plot 1: Default white canvas   plot.new()   rasterImage(default_canvas, 0, 0, 1, 1)   title(main = titles[1], cex.main = 1.2, font.main = 2)      # Plot 2: Best MCMC result   plot.new()   rasterImage(best_canvas, 0, 0, 1, 1)   title(main = titles[2], cex.main = 1.2, font.main = 2)      # Plot 3: True target image   plot.new()   rasterImage(target_img, 0, 0, 1, 1)   title(main = titles[3], cex.main = 1.2, font.main = 2)      # Overall title   mtext(\"MCMC Line Painting: Leaf Image Progression\",          outer = TRUE, line = 0, cex = 1.5, font = 2) }  # Create default white canvas H <- dim(target_img)[1] W <- dim(target_img)[2] default_canvas <- array(1, dim = c(H, W, 3))  # White background  # For demonstration, we'll use a simulated best result # In practice, this would be res$best$canvas from the MCMC run set.seed(42) simulated_best <- default_canvas + array(rnorm(H * W * 3, 0, 0.1), dim = c(H, W, 3)) simulated_best <- pmin(pmax(simulated_best, 0), 1)  # Clamp to [0,1]  # Create the triptych create_triptych(default_canvas, simulated_best, target_img)"},{"path":"https://dchodge.github.io/mcmcpainter/articles/leaf_mcmc_demo.html","id":"analyze-mcmc-results","dir":"Articles","previous_headings":"MCMC Line Painting Demo: Leaf Image","what":"Analyze MCMC Results","title":"MCMC Line Painting Demo: Leaf Image","text":"Let’s examine progression MCMC algorithm:","code":"# Function to analyze MCMC progression analyze_mcmc_progression <- function(out_dir) {   # Get list of iteration files   iter_files <- list.files(out_dir, pattern = \"iter_.*\\\\.png\", full.names = TRUE)      if (length(iter_files) == 0) {     cat(\"No iteration files found. Run the MCMC first.\\n\")     return(NULL)   }      # Extract iteration numbers   iter_nums <- as.numeric(gsub(\".*iter_(\\\\d+)\\\\.png\", \"\\\\1\", basename(iter_files)))   iter_nums <- sort(iter_nums)      cat(\"MCMC progression analysis:\\n\")   cat(\"Total iterations saved:\", length(iter_nums), \"\\n\")   cat(\"Iteration range:\", min(iter_nums), \"to\", max(iter_nums), \"\\n\")   cat(\"Save frequency:\", ifelse(length(iter_nums) > 1,                                 iter_nums[2] - iter_nums[1], \"N/A\"), \"\\n\\n\")      # Display first few and last few iterations   cat(\"First few iterations:\", head(iter_nums, 3), \"\\n\")   cat(\"Last few iterations:\", tail(iter_nums, 3), \"\\n\")      return(iter_nums) }  # Analyze the results (commented out since we haven't run MCMC yet) # analyze_mcmc_progression(\"inst/results/leaf_vignette_20k\")"},{"path":"https://dchodge.github.io/mcmcpainter/articles/leaf_mcmc_demo.html","id":"performance-metrics","dir":"Articles","previous_headings":"MCMC Line Painting Demo: Leaf Image","what":"Performance Metrics","title":"MCMC Line Painting Demo: Leaf Image","text":"Let’s create function calculate display performance metrics:","code":"# Function to calculate performance metrics calculate_performance_metrics <- function(target_img, canvas, lines) {   # Calculate SSE   sse <- sum((target_img - canvas)^2)      # Calculate PSNR (Peak Signal-to-Noise Ratio)   mse <- sse / length(target_img)   psnr <- 20 * log10(1 / sqrt(mse))      # Calculate structural similarity (simplified)   # In practice, you might use a proper SSIM implementation      cat(\"Performance Metrics:\\n\")   cat(\"==================\\n\")   cat(\"Sum of Squared Errors (SSE):\", round(sse, 2), \"\\n\")   cat(\"Mean Squared Error (MSE):\", round(mse, 6), \"\\n\")   cat(\"Peak Signal-to-Noise Ratio (PSNR):\", round(psnr, 2), \"dB\\n\")   cat(\"Number of lines:\", length(lines), \"\\n\")   cat(\"Canvas dimensions:\", dim(canvas)[2], \"x\", dim(canvas)[1], \"\\n\")      return(list(sse = sse, mse = mse, psnr = psnr, n_lines = length(lines))) }  # Example usage (commented out since we haven't run MCMC yet) # metrics <- calculate_performance_metrics(target_img, res$canvas, res$lines)"},{"path":"https://dchodge.github.io/mcmcpainter/articles/leaf_mcmc_demo.html","id":"interactive-exploration","dir":"Articles","previous_headings":"MCMC Line Painting Demo: Leaf Image","what":"Interactive Exploration","title":"MCMC Line Painting Demo: Leaf Image","text":"Let’s create interactive way explore MCMC results:","code":"# Function to create an interactive gallery create_interactive_gallery <- function(out_dir) {   iter_files <- list.files(out_dir, pattern = \"iter_.*\\\\.png\", full.names = TRUE)      if (length(iter_files) == 0) {     cat(\"No iteration files found. Run the MCMC first.\\n\")     return(NULL)   }      # Sort files by iteration number   iter_nums <- as.numeric(gsub(\".*iter_(\\\\d+)\\\\.png\", \"\\\\1\", basename(iter_files)))   sorted_files <- iter_files[order(iter_nums)]      cat(\"Interactive Gallery Available:\\n\")   cat(\"=============================\\n\")   cat(\"Total images:\", length(sorted_files), \"\\n\")   cat(\"Iteration range:\", min(iter_nums), \"to\", max(iter_nums), \"\\n\\n\")      cat(\"To view specific iterations:\\n\")   cat(\"1. Open the output directory:\", out_dir, \"\\n\")   cat(\"2. Navigate through iter_XXXXXX.png files\\n\")   cat(\"3. Use view_rgb() function in R to display any image\\n\\n\")      # Show first few files   cat(\"First few files:\\n\")   for (i in 1:min(3, length(sorted_files))) {     cat(\"  \", basename(sorted_files[i]), \"\\n\")   }      return(sorted_files) }  # Create gallery info (commented out since we haven't run MCMC yet) # gallery_files <- create_interactive_gallery(\"inst/results/leaf_vignette_20k\")"},{"path":"https://dchodge.github.io/mcmcpainter/articles/leaf_mcmc_demo.html","id":"summary","dir":"Articles","previous_headings":"MCMC Line Painting Demo: Leaf Image","what":"Summary","title":"MCMC Line Painting Demo: Leaf Image","text":"vignette demonstrates complete workflow generating line paintings using MCMC Art package: Setup: Load package compile C++ code Image Loading: Load examine target image MCMC Execution: Run algorithm 20,000 iterations Visualization: Create triptych showing progression Analysis: Examine results performance metrics Exploration: Interactive gallery results","code":""},{"path":"https://dchodge.github.io/mcmcpainter/articles/leaf_mcmc_demo.html","id":"next-steps","dir":"Articles","previous_headings":"MCMC Line Painting Demo: Leaf Image","what":"Next Steps","title":"MCMC Line Painting Demo: Leaf Image","text":"run vignette real results: Uncomment MCMC execution chunk Run vignette generate artwork Explore results output directory Experiment different parameters image sizes package provides robust, high-performance framework generating artistic line paintings MCMC optimization.","code":""},{"path":"https://dchodge.github.io/mcmcpainter/articles/mcmcPainter_demo.html","id":"mcmcpainter-complete-mcmc-line-painting-demo","dir":"Articles","previous_headings":"","what":"mcmcPainter: Complete MCMC Line Painting Demo","title":"mcmcPainter: Complete MCMC Line Painting Demo","text":"vignette demonstrates complete workflow mcmcPainter package, featuring automatic image analysis, PNG verification, intelligent parameter optimization, beautiful triptych visualizations.","code":""},{"path":"https://dchodge.github.io/mcmcpainter/articles/mcmcPainter_demo.html","id":"setup","dir":"Articles","previous_headings":"mcmcPainter: Complete MCMC Line Painting Demo","what":"Setup","title":"mcmcPainter: Complete MCMC Line Painting Demo","text":"First, let’s load package compile C++ code:","code":"# Load the package functions source(\"../R/mcmcPainter.R\") source(\"../R/mcmc_core.R\")  source(\"../R/utilities.R\")  # Compile the C++ code for performance cat(\"Compiling C++ code...\\n\") ## Compiling C++ code... Rcpp::sourceCpp(\"../src/mcmc_painter_cpp.cpp\") cat(\"C++ code compiled successfully!\\n\\n\") ## C++ code compiled successfully!"},{"path":"https://dchodge.github.io/mcmcpainter/articles/mcmcPainter_demo.html","id":"image-analysis-and-png-verification","dir":"Articles","previous_headings":"mcmcPainter: Complete MCMC Line Painting Demo","what":"Image Analysis and PNG Verification","title":"mcmcPainter: Complete MCMC Line Painting Demo","text":"Let’s start analyzing available images demonstrating PNG verification capabilities:","code":"# Analyze both available images images <- c(\"../inst/extdata/leaf_converted.png\", \"../inst/extdata/iamami.png\")  cat(\"Image Analysis Results:\\n\") ## Image Analysis Results: cat(\"======================\\n\\n\") ## ====================== for (img_path in images) {   cat(\"File:\", basename(img_path), \"\\n\")   cat(\"----------------------------------------\\n\")      img_info <- get_image_info(img_path)      cat(\"Dimensions:\", img_info$width, \"x\", img_info$height, \"pixels\\n\")   cat(\"File size:\", round(img_info$file_size / 1024, 1), \"KB\\n\")   cat(\"File extension:\", img_info$file_extension, \"\\n\")   cat(\"PNG verification:\", ifelse(img_info$is_true_png, \"✓ True PNG\", \"✗ Not a true PNG\"), \"\\n\")   cat(\"Aspect ratio:\", round(img_info$width / img_info$height, 3), \"\\n\\n\") } ## File: leaf_converted.png  ## ---------------------------------------- ## Dimensions: 800 x 1422 pixels ## File size: 132.1 KB ## File extension: png  ## PNG verification: ✓ True PNG  ## Aspect ratio: 0.563  ##  ## File: iamami.png  ## ---------------------------------------- ## Dimensions: 788 x 605 pixels ## File size: 336 KB ## File extension: png  ## PNG verification: ✓ True PNG  ## Aspect ratio: 1.302"},{"path":"https://dchodge.github.io/mcmcpainter/articles/mcmcPainter_demo.html","id":"automatic-mcmc-configuration","dir":"Articles","previous_headings":"mcmcPainter: Complete MCMC Line Painting Demo","what":"Automatic MCMC Configuration","title":"mcmcPainter: Complete MCMC Line Painting Demo","text":"Now let’s demonstrate automatic configuration system images:","code":"# Demonstrate auto-configuration for different quality levels cat(\"Automatic MCMC Configuration Examples:\\n\") ## Automatic MCMC Configuration Examples: cat(\"=====================================\\n\\n\") ## ===================================== # Test with leaf image leaf_path <- \"../inst/extdata/leaf_converted.png\"  cat(\"1. Leaf Image - Standard Quality (max_dimension = 800):\\n\") ## 1. Leaf Image - Standard Quality (max_dimension = 800): cat(\"----------------------------------------------------\\n\") ## ---------------------------------------------------- leaf_std <- auto_configure_mcmc(leaf_path, max_dimension = 800, target_iterations = 20000) ## Image Analysis: ## ============== ## File: leaf_converted.png  ## Original dimensions: 800 x 1422 pixels ## File size: 132.1 KB ## PNG verification: ✓ True PNG  ##  ## Optimized MCMC Parameters: ## ========================== ## Scaled dimensions: 450 x 800 pixels ## Scaling factor: 0.563  ## Adjusted iterations: 20000  ## Save frequency: 1000 cat(\"\\n2. Leaf Image - High Quality (max_dimension = 1200):\\n\") ##  ## 2. Leaf Image - High Quality (max_dimension = 1200): cat(\"--------------------------------------------------\\n\") ## -------------------------------------------------- leaf_hq <- auto_configure_mcmc(leaf_path, max_dimension = 1200, target_iterations = 30000) ## Image Analysis: ## ============== ## File: leaf_converted.png  ## Original dimensions: 800 x 1422 pixels ## File size: 132.1 KB ## PNG verification: ✓ True PNG  ##  ## Optimized MCMC Parameters: ## ========================== ## Scaled dimensions: 675 x 1200 pixels ## Scaling factor: 0.844  ## Adjusted iterations: 33750  ## Save frequency: 1688 cat(\"\\n3. Leaf Image - Quick Demo (max_dimension = 400):\\n\") ##  ## 3. Leaf Image - Quick Demo (max_dimension = 400): cat(\"------------------------------------------------\\n\") ## ------------------------------------------------ leaf_quick <- auto_configure_mcmc(leaf_path, max_dimension = 400, target_iterations = 5000) ## Image Analysis: ## ============== ## File: leaf_converted.png  ## Original dimensions: 800 x 1422 pixels ## File size: 132.1 KB ## PNG verification: ✓ True PNG  ##  ## Optimized MCMC Parameters: ## ========================== ## Scaled dimensions: 225 x 400 pixels ## Scaling factor: 0.281  ## Adjusted iterations: 5000  ## Save frequency: 1000 # Test with iamami image iamami_path <- \"../inst/extdata/iamami.png\"  cat(\"\\n4. Iamami Image - Standard Quality (max_dimension = 800):\\n\") ##  ## 4. Iamami Image - Standard Quality (max_dimension = 800): cat(\"--------------------------------------------------------\\n\") ## -------------------------------------------------------- iamami_std <- auto_configure_mcmc(iamami_path, max_dimension = 800, target_iterations = 20000) ## Image Analysis: ## ============== ## File: iamami.png  ## Original dimensions: 788 x 605 pixels ## File size: 336 KB ## PNG verification: ✓ True PNG  ##  ## Optimized MCMC Parameters: ## ========================== ## Scaled dimensions: 788 x 605 pixels ## Scaling factor: 1  ## Adjusted iterations: 20000  ## Save frequency: 1000"},{"path":"https://dchodge.github.io/mcmcpainter/articles/mcmcPainter_demo.html","id":"comprehensive-mcmc-options","dir":"Articles","previous_headings":"mcmcPainter: Complete MCMC Line Painting Demo","what":"Comprehensive MCMC Options","title":"mcmcPainter: Complete MCMC Line Painting Demo","text":"Let’s explore comprehensive MCMC options available package:","code":"# Demonstrate different MCMC configuration options cat(\"MCMC Configuration Options:\\n\") ## MCMC Configuration Options: cat(\"==========================\\n\\n\") ## ========================== # Option 1: Full auto-configuration cat(\"Option 1: Full Auto-Configuration\\n\") ## Option 1: Full Auto-Configuration cat(\"---------------------------------\\n\") ## --------------------------------- cat(\"This automatically determines all parameters:\\n\") ## This automatically determines all parameters: cat(\"- Image dimensions (scaled optimally)\\n\") ## - Image dimensions (scaled optimally) cat(\"- Number of iterations (based on complexity)\\n\") ## - Number of iterations (based on complexity) cat(\"- Save frequency (balanced for progress tracking)\\n\") ## - Save frequency (balanced for progress tracking) cat(\"- All other MCMC parameters\\n\\n\") ## - All other MCMC parameters # Option 2: Partial auto-configuration cat(\"Option 2: Partial Auto-Configuration\\n\") ## Option 2: Partial Auto-Configuration cat(\"------------------------------------\\n\") ## ------------------------------------ cat(\"You can override specific parameters:\\n\") ## You can override specific parameters: cat(\"- Set custom dimensions\\n\") ## - Set custom dimensions cat(\"- Specify iteration count\\n\") ## - Specify iteration count cat(\"- Control save frequency\\n\") ## - Control save frequency cat(\"- Keep auto-optimization for other parameters\\n\\n\") ## - Keep auto-optimization for other parameters # Option 3: Manual configuration cat(\"Option 3: Manual Configuration\\n\") ## Option 3: Manual Configuration cat(\"------------------------------\\n\") ## ------------------------------ cat(\"Complete control over all parameters:\\n\") ## Complete control over all parameters: cat(\"- Exact dimensions\\n\") ## - Exact dimensions cat(\"- Custom iteration count\\n\") ## - Custom iteration count cat(\"- Specific save frequency\\n\") ## - Specific save frequency cat(\"- Manual parameter tuning\\n\\n\") ## - Manual parameter tuning # Example configurations cat(\"Example Configurations:\\n\") ## Example Configurations: cat(\"======================\\n\\n\") ## ====================== # Quick demo configuration cat(\"Quick Demo (auto_config = TRUE, max_dimension = 400):\\n\") ## Quick Demo (auto_config = TRUE, max_dimension = 400): cat(\"- Fast execution for testing\\n\") ## - Fast execution for testing cat(\"- Lower resolution for speed\\n\") ## - Lower resolution for speed cat(\"- Fewer iterations\\n\") ## - Fewer iterations cat(\"- Frequent saves for progress tracking\\n\\n\") ## - Frequent saves for progress tracking # Production configuration cat(\"Production Quality (auto_config = TRUE, max_dimension = 1200):\\n\") ## Production Quality (auto_config = TRUE, max_dimension = 1200): cat(\"- High resolution output\\n\") ## - High resolution output cat(\"- More iterations for quality\\n\") ## - More iterations for quality cat(\"- Balanced save frequency\\n\") ## - Balanced save frequency cat(\"- Optimized for final results\\n\\n\") ## - Optimized for final results # Custom configuration cat(\"Custom Configuration (auto_config = FALSE):\\n\") ## Custom Configuration (auto_config = FALSE): cat(\"- Manual dimension specification\\n\") ## - Manual dimension specification cat(\"- Custom iteration count\\n\") ## - Custom iteration count cat(\"- Specific save frequency\\n\") ## - Specific save frequency cat(\"- Full parameter control\\n\\n\") ## - Full parameter control"},{"path":"https://dchodge.github.io/mcmcpainter/articles/mcmcPainter_demo.html","id":"running-mcmc-with-different-options","dir":"Articles","previous_headings":"mcmcPainter: Complete MCMC Line Painting Demo","what":"Running MCMC with Different Options","title":"mcmcPainter: Complete MCMC Line Painting Demo","text":"Let’s demonstrate running MCMC various configuration options: Note: MCMC runs set eval=FALSE avoid running vignette compilation. practice, run generate artwork.","code":"# Example 1: Full auto-configuration (recommended for most users) cat(\"Example 1: Full Auto-Configuration\\n\") cat(\"==================================\\n\") res1 <- run_line_painter(   image_path = \"../inst/extdata/leaf_converted.png\",   out_dir = \"inst/results/leaf_auto_demo\",   seed = 42,   auto_config = TRUE,  # Enable auto-configuration   max_dimension = 800, # Target max dimension   verbose = TRUE )  # Example 2: Partial auto-configuration with custom iterations cat(\"\\nExample 2: Partial Auto-Configuration\\n\") cat(\"=====================================\\n\") res2 <- run_line_painter(   image_path = \"../inst/extdata/iamami.png\",   iters = 15000,       # Custom iteration count   out_dir = \"inst/results/iamami_custom_iter\",   seed = 42,   auto_config = TRUE,  # Keep auto-configuration for dimensions   max_dimension = 600, # Smaller target dimension   verbose = TRUE )  # Example 3: Manual configuration cat(\"\\nExample 3: Manual Configuration\\n\") cat(\"===============================\\n\") res3 <- run_line_painter(   image_path = \"../inst/extdata/leaf_converted.png\",   width = 512,         # Manual width   height = 512,        # Manual height   iters = 10000,       # Manual iterations   out_dir = \"inst/results/leaf_manual_demo\",   seed = 42,   auto_config = FALSE, # Disable auto-configuration   save_every = 500,    # Manual save frequency   verbose = TRUE )"},{"path":"https://dchodge.github.io/mcmcpainter/articles/mcmcPainter_demo.html","id":"creating-and-saving-triptychs","dir":"Articles","previous_headings":"mcmcPainter: Complete MCMC Line Painting Demo","what":"Creating and Saving Triptychs","title":"mcmcPainter: Complete MCMC Line Painting Demo","text":"Now let’s demonstrate triptych creation saving functionality:","code":"# Function to demonstrate triptych creation demonstrate_triptych <- function(image_path, title = \"MCMC Line Painting Demo\") {   # Load image   target_img <- load_image_rgb(image_path, out_w = 400, out_h = 400)      # Create default canvas   H <- dim(target_img)[1]   W <- dim(target_img)[2]   default_canvas <- array(1, dim = c(H, W, 3))  # White background      # Create simulated best result for demonstration   set.seed(42)   simulated_best <- default_canvas + array(rnorm(H * W * 3, 0, 0.1), dim = c(H, W, 3))   simulated_best <- pmin(pmax(simulated_best, 0), 1)      # Create triptych   create_triptych(     default_canvas = default_canvas,     best_canvas = simulated_best,     target_img = target_img,     titles = c(\"Default Canvas\", \"Best Result\", \"Target Image\"),     main_title = title   )      return(list(     default_canvas = default_canvas,     best_canvas = simulated_best,     target_img = target_img   )) }  # Demonstrate triptych for leaf image cat(\"Creating triptych for leaf image...\\n\") ## Creating triptych for leaf image... leaf_triptych <- demonstrate_triptych(   \"../inst/extdata/leaf_converted.png\",    \"Leaf Image MCMC Progression\" ) # Demonstrate triptych for iamami image cat(\"\\nCreating triptych for iamami image...\\n\") ##  ## Creating triptych for iamami image... iamami_triptych <- demonstrate_triptych(   \"../inst/extdata/iamami.png\",    \"Iamami Image MCMC Progression\" )"},{"path":"https://dchodge.github.io/mcmcpainter/articles/mcmcPainter_demo.html","id":"saving-triptychs-to-files","dir":"Articles","previous_headings":"mcmcPainter: Complete MCMC Line Painting Demo","what":"Saving Triptychs to Files","title":"mcmcPainter: Complete MCMC Line Painting Demo","text":"Let’s demonstrate saving triptychs different formats:","code":"# Function to demonstrate triptych saving demonstrate_triptych_saving <- function(triptych_data, base_name, output_dir = \"inst/results\") {   # Create output directory   dir.create(output_dir, showWarnings = FALSE, recursive = TRUE)      # Save as PDF   pdf_path <- file.path(output_dir, paste0(base_name, \"_triptych.pdf\"))   save_triptych(     default_canvas = triptych_data$default_canvas,     best_canvas = triptych_data$best_canvas,     target_img = triptych_data$target_img,     output_path = pdf_path,     width = 12, height = 5,     titles = c(\"Default Canvas\", \"Best Result\", \"Target Image\"),     main_title = paste(base_name, \"MCMC Progression\"),     format = \"pdf\"   )      # Save as PNG   png_path <- file.path(output_dir, paste0(base_name, \"_triptych.png\"))   save_triptych(     default_canvas = triptych_data$default_canvas,     best_canvas = triptych_data$best_canvas,     target_img = triptych_data$target_img,     output_path = png_path,     width = 12, height = 5,     titles = c(\"Default Canvas\", \"Best Result\", \"Target Image\"),     main_title = paste(base_name, \"MCMC Progression\"),     format = \"png\"   )      cat(\"Triptych saved for\", base_name, \":\\n\")   cat(\"- PDF:\", pdf_path, \"\\n\")   cat(\"- PNG:\", png_path, \"\\n\\n\") }  # Save triptychs for both images cat(\"Saving triptychs to files...\\n\") ## Saving triptychs to files... demonstrate_triptych_saving(leaf_triptych, \"leaf\", \"inst/results/leaf_demo\") ## Triptych saved for leaf : ## - PDF: inst/results/leaf_demo/leaf_triptych.pdf  ## - PNG: inst/results/leaf_demo/leaf_triptych.png demonstrate_triptych_saving(iamami_triptych, \"iamami\", \"inst/results/iamami_demo\") ## Triptych saved for iamami : ## - PDF: inst/results/iamami_demo/iamami_triptych.pdf  ## - PNG: inst/results/iamami_demo/iamami_triptych.png"},{"path":"https://dchodge.github.io/mcmcpainter/articles/mcmcPainter_demo.html","id":"performance-analysis-and-optimization","dir":"Articles","previous_headings":"mcmcPainter: Complete MCMC Line Painting Demo","what":"Performance Analysis and Optimization","title":"mcmcPainter: Complete MCMC Line Painting Demo","text":"Let’s analyze performance implications different configurations:","code":"# Performance analysis function analyze_performance <- function(configs, image_names) {   cat(\"Performance Analysis:\\n\")   cat(\"====================\\n\\n\")      for (i in seq_along(configs)) {     config <- configs[[i]]     name <- image_names[i]          cat(name, \"Image:\\n\")     cat(\"--------\\n\")          # Original vs scaled complexity     original_pixels <- config$original_width * config$original_height     scaled_pixels <- config$scaled_width * config$scaled_height          cat(\"Original complexity:\", format(original_pixels, big.mark = \",\"), \"pixels\\n\")     cat(\"Scaled complexity:\", format(scaled_pixels, big.mark = \",\"), \"pixels\\n\")     cat(\"Complexity reduction:\", round((1 - scaled_pixels/original_pixels) * 100, 1), \"%\\n\")          # Performance estimates     estimated_memory_mb <- round(scaled_pixels * 3 * 8 / (1024 * 1024), 1)     estimated_time_min <- round(config$iterations / 1000, 1)          cat(\"Estimated memory:\", estimated_memory_mb, \"MB\\n\")     cat(\"Estimated runtime:\", estimated_time_min, \"minutes\\n\")     cat(\"Save frequency:\", config$save_every, \"iterations\\n\")     cat(\"PNG verification:\", ifelse(config$is_true_png, \"✓ True PNG\", \"✗ Not a true PNG\"), \"\\n\\n\")   } }  # Analyze performance for different configurations configs <- list(leaf_std, leaf_hq, leaf_quick, iamami_std) image_names <- c(\"Leaf (Standard)\", \"Leaf (High Quality)\", \"Leaf (Quick)\", \"Iamami (Standard)\")  analyze_performance(configs, image_names) ## Performance Analysis: ## ==================== ##  ## Leaf (Standard) Image: ## -------- ## Original complexity: 1,137,600 pixels ## Scaled complexity: 360,000 pixels ## Complexity reduction: 68.4 % ## Estimated memory: 8.2 MB ## Estimated runtime: 20 minutes ## Save frequency: 1000 iterations ## PNG verification: ✓ True PNG  ##  ## Leaf (High Quality) Image: ## -------- ## Original complexity: 1,137,600 pixels ## Scaled complexity: 810,000 pixels ## Complexity reduction: 28.8 % ## Estimated memory: 18.5 MB ## Estimated runtime: 33.8 minutes ## Save frequency: 1688 iterations ## PNG verification: ✓ True PNG  ##  ## Leaf (Quick) Image: ## -------- ## Original complexity: 1,137,600 pixels ## Scaled complexity: 90,000 pixels ## Complexity reduction: 92.1 % ## Estimated memory: 2.1 MB ## Estimated runtime: 5 minutes ## Save frequency: 1000 iterations ## PNG verification: ✓ True PNG  ##  ## Iamami (Standard) Image: ## -------- ## Original complexity: 476,740 pixels ## Scaled complexity: 476,740 pixels ## Complexity reduction: 0 % ## Estimated memory: 10.9 MB ## Estimated runtime: 20 minutes ## Save frequency: 1000 iterations ## PNG verification: ✓ True PNG"},{"path":"https://dchodge.github.io/mcmcpainter/articles/mcmcPainter_demo.html","id":"advanced-customization-options","dir":"Articles","previous_headings":"mcmcPainter: Complete MCMC Line Painting Demo","what":"Advanced Customization Options","title":"mcmcPainter: Complete MCMC Line Painting Demo","text":"Let’s explore advanced customization capabilities:","code":"# Advanced customization examples cat(\"Advanced Customization Options:\\n\") ## Advanced Customization Options: cat(\"==============================\\n\\n\") ## ============================== # Custom triptych titles cat(\"1. Custom Triptych Titles:\\n\") ## 1. Custom Triptych Titles: cat(\"-------------------------\\n\") ## ------------------------- cat(\"You can customize panel titles and main title:\\n\") ## You can customize panel titles and main title: cat(\"- Panel 1: 'Starting Point'\\n\") ## - Panel 1: 'Starting Point' cat(\"- Panel 2: 'Generated Artwork'\\n\") ## - Panel 2: 'Generated Artwork' cat(\"- Panel 3: 'Reference Image'\\n\") ## - Panel 3: 'Reference Image' cat(\"- Main title: 'My Custom MCMC Art'\\n\\n\") ## - Main title: 'My Custom MCMC Art' # Custom save formats and dimensions cat(\"2. Custom Save Formats:\\n\") ## 2. Custom Save Formats: cat(\"----------------------\\n\") ## ---------------------- cat(\"Save triptychs in different formats and sizes:\\n\") ## Save triptychs in different formats and sizes: cat(\"- PDF: High-quality vector graphics\\n\") ## - PDF: High-quality vector graphics cat(\"- PNG: High-resolution raster images\\n\") ## - PNG: High-resolution raster images cat(\"- Custom dimensions: 20x8 inches for wide displays\\n\") ## - Custom dimensions: 20x8 inches for wide displays cat(\"- Custom DPI: 300 DPI for print quality\\n\\n\") ## - Custom DPI: 300 DPI for print quality # Batch processing cat(\"3. Batch Processing:\\n\") ## 3. Batch Processing: cat(\"-------------------\\n\") ## ------------------- cat(\"Process multiple images with consistent settings:\\n\") ## Process multiple images with consistent settings: cat(\"- Same max_dimension for all images\\n\") ## - Same max_dimension for all images cat(\"- Consistent iteration counts\\n\") ## - Consistent iteration counts cat(\"- Standardized output directories\\n\") ## - Standardized output directories cat(\"- Batch triptych generation\\n\\n\") ## - Batch triptych generation # Quality presets cat(\"4. Quality Presets:\\n\") ## 4. Quality Presets: cat(\"------------------\\n\") ## ------------------ cat(\"Predefined configuration profiles:\\n\") ## Predefined configuration profiles: cat(\"- Quick Demo: 400px, 5K iterations, fast execution\\n\") ## - Quick Demo: 400px, 5K iterations, fast execution cat(\"- Standard: 800px, 20K iterations, balanced quality\\n\") ## - Standard: 800px, 20K iterations, balanced quality cat(\"- High Quality: 1200px, 30K iterations, premium results\\n\") ## - High Quality: 1200px, 30K iterations, premium results cat(\"- Ultra HD: 1600px, 50K iterations, maximum quality\\n\\n\") ## - Ultra HD: 1600px, 50K iterations, maximum quality"},{"path":"https://dchodge.github.io/mcmcpainter/articles/mcmcPainter_demo.html","id":"summary","dir":"Articles","previous_headings":"mcmcPainter: Complete MCMC Line Painting Demo","what":"Summary","title":"mcmcPainter: Complete MCMC Line Painting Demo","text":"vignette demonstrates complete mcmcPainter package workflow:","code":""},{"path":"https://dchodge.github.io/mcmcpainter/articles/mcmcPainter_demo.html","id":"core-features","dir":"Articles","previous_headings":"mcmcPainter: Complete MCMC Line Painting Demo > Summary","what":"🎯 Core Features","title":"mcmcPainter: Complete MCMC Line Painting Demo","text":"Automatic Image Analysis: need manually specify dimensions PNG Verification: Distinguishes true PNGs renamed files Intelligent Parameter Optimization: Automatic MCMC configuration Comprehensive MCMC Options: Full control needed Beautiful Triptychs: Professional visualizations Multiple Output Formats: PDF PNG support","code":""},{"path":"https://dchodge.github.io/mcmcpainter/articles/mcmcPainter_demo.html","id":"usage-patterns","dir":"Articles","previous_headings":"mcmcPainter: Complete MCMC Line Painting Demo > Summary","what":"🚀 Usage Patterns","title":"mcmcPainter: Complete MCMC Line Painting Demo","text":"Quick Start: run_line_painter(image_path) full auto-configuration Custom Quality: Adjust max_dimension target_iterations Manual Control: Set auto_config = FALSE complete control Batch Processing: Consistent settings across multiple images","code":""},{"path":"https://dchodge.github.io/mcmcpainter/articles/mcmcPainter_demo.html","id":"performance-optimization","dir":"Articles","previous_headings":"mcmcPainter: Complete MCMC Line Painting Demo > Summary","what":"📊 Performance Optimization","title":"mcmcPainter: Complete MCMC Line Painting Demo","text":"Smart scaling based image complexity Iteration adjustment optimal quality Memory estimation resource planning Runtime prediction project planning","code":""},{"path":"https://dchodge.github.io/mcmcpainter/articles/mcmcPainter_demo.html","id":"output-quality","dir":"Articles","previous_headings":"mcmcPainter: Complete MCMC Line Painting Demo > Summary","what":"🎨 Output Quality","title":"mcmcPainter: Complete MCMC Line Painting Demo","text":"Professional triptychs showing progression High-resolution outputs multiple formats Progress tracking throughout MCMC execution Performance metrics quality assessment mcmcPainter package provides complete, professional solution generating line paintings MCMC optimization, intelligent automation comprehensive customization options.","code":""},{"path":"https://dchodge.github.io/mcmcpainter/articles/me_mcmc_demo.html","id":"me-mcmc-line-painting-demo","dir":"Articles","previous_headings":"","what":"Me MCMC Line Painting Demo","title":"Me MCMC Line Painting Demo","text":"vignette demonstrates complete workflow generating line paintings using mcmcPainter package, featuring personal .png image 100,000 MCMC iterations maximum detail quality.","code":""},{"path":"https://dchodge.github.io/mcmcpainter/articles/me_mcmc_demo.html","id":"image-analysis","dir":"Articles","previous_headings":"Me MCMC Line Painting Demo","what":"👤 Image Analysis","title":"Me MCMC Line Painting Demo","text":"First, let’s analyze image understand characteristics:","code":"# Load package functions source(\"../R/mcmcPainter.R\") source(\"../R/mcmc_core.R\")  source(\"../R/utilities.R\")  # Analyze the me image image_path <- \"../inst/extdata/me.png\" cat(\"Analyzing image:\", basename(image_path), \"\\n\") ## Analyzing image: me.png cat(\"=====================================\\n\") ## ===================================== img_info <- get_image_info(image_path) cat(\"File:\", basename(image_path), \"\\n\") ## File: me.png cat(\"Original dimensions:\", img_info$width, \"x\", img_info$height, \"pixels\\n\") ## Original dimensions: 400 x 487 pixels cat(\"File size:\", round(img_info$file_size / 1024, 1), \"KB\\n\") ## File size: 271.9 KB cat(\"PNG verification:\", ifelse(img_info$is_true_png, \"✓ True PNG\", \"✗ Not a true PNG\"), \"\\n\") ## PNG verification: ✓ True PNG cat(\"Aspect ratio:\", round(img_info$width / img_info$height, 3), \"\\n\") ## Aspect ratio: 0.821 cat(\"Total pixels:\", format(img_info$width * img_info$height, big.mark = \",\"), \"\\n\\n\") ## Total pixels: 194,800 # Display the original image library(magick) me_img <- image_read(image_path) image_info <- image_info(me_img) cat(\"Magick image info:\\n\") ## Magick image info: cat(\"Dimensions:\", image_info$width, \"x\", image_info$height, \"\\n\") ## Dimensions: 400 x 487 cat(\"Format:\", image_info$format, \"\\n\") ## Format: PNG cat(\"Colorspace:\", image_info$colorspace, \"\\n\") ## Colorspace: sRGB cat(\"Filesize:\", round(image_info$filesize / 1024, 1), \"KB\\n\\n\") ## Filesize: 271.9 KB"},{"path":"https://dchodge.github.io/mcmcpainter/articles/me_mcmc_demo.html","id":"mcmc-configuration","dir":"Articles","previous_headings":"Me MCMC Line Painting Demo","what":"🎯 MCMC Configuration","title":"Me MCMC Line Painting Demo","text":"Now let’s configure MCMC parameters optimal performance image:","code":"# High-quality configuration for 100K steps cat(\"High-Quality MCMC Configuration:\\n\") ## High-Quality MCMC Configuration: cat(\"================================\\n\") ## ================================ cat(\"Target iterations: 100,000\\n\") ## Target iterations: 100,000 cat(\"Save frequency: Every 5,000 iterations\\n\") ## Save frequency: Every 5,000 iterations cat(\"Max dimension: 1200 (high resolution)\\n\") ## Max dimension: 1200 (high resolution) cat(\"Expected runtime: 3-5 hours (depending on system)\\n\\n\") ## Expected runtime: 3-5 hours (depending on system) # Auto-configure MCMC parameters config <- auto_configure_mcmc(   image_path = image_path,   max_dimension = 1200,        # High resolution   target_iterations = 100000    # 100K iterations ) ## Image Analysis: ## ============== ## File: me.png  ## Original dimensions: 400 x 487 pixels ## File size: 271.9 KB ## PNG verification: ✓ True PNG  ##  ## Optimized MCMC Parameters: ## ========================== ## Scaled dimensions: 400 x 487 pixels ## Scaling factor: 1  ## Adjusted iterations: 1e+05  ## Save frequency: 5000 cat(\"Optimized MCMC Parameters:\\n\") ## Optimized MCMC Parameters: cat(\"==========================\\n\") ## ========================== cat(\"Original dimensions:\", config$original_width, \"x\", config$original_height, \"\\n\") ## Original dimensions: 400 x 487 cat(\"Scaled dimensions:\", config$scaled_width, \"x\", config$scaled_height, \"\\n\") ## Scaled dimensions: 400 x 487 cat(\"Scaling factor:\", round(config$scale_factor, 3), \"\\n\") ## Scaling factor: 1 cat(\"Adjusted iterations:\", format(config$iterations, big.mark = \",\"), \"\\n\") ## Adjusted iterations: 1e+05 cat(\"Save frequency:\", format(config$save_every, big.mark = \",\"), \"\\n\") ## Save frequency: 5,000 cat(\"PNG verification:\", ifelse(config$is_true_png, \"✓ True PNG\", \"✗ Not a true PNG\"), \"\\n\\n\") ## PNG verification: ✓ True PNG # Calculate complexity metrics original_pixels <- config$original_width * config$original_height scaled_pixels <- config$scaled_width * config$scaled_height complexity_reduction <- (1 - scaled_pixels / original_pixels) * 100  cat(\"Complexity Analysis:\\n\") ## Complexity Analysis: cat(\"===================\\n\") ## =================== cat(\"Original pixels:\", format(original_pixels, big.mark = \",\"), \"\\n\") ## Original pixels: 194,800 cat(\"Scaled pixels:\", format(scaled_pixels, big.mark = \",\"), \"\\n\") ## Scaled pixels: 194,800 cat(\"Complexity reduction:\", round(complexity_reduction, 1), \"%\\n\") ## Complexity reduction: 0 % cat(\"Memory usage:\", round(scaled_pixels * 3 * 8 / 1024 / 1024, 1), \"MB\\n\\n\") ## Memory usage: 4.5 MB"},{"path":"https://dchodge.github.io/mcmcpainter/articles/me_mcmc_demo.html","id":"running-the-mcmc-algorithm","dir":"Articles","previous_headings":"Me MCMC Line Painting Demo","what":"🚀 Running the MCMC Algorithm","title":"Me MCMC Line Painting Demo","text":"Now let’s run MCMC algorithm generate line painting. take several hours 100K iterations:","code":"# Compile the C++ code for performance cat(\"Compiling C++ code...\\n\") Rcpp::sourceCpp(\"../src/mcmc_painter_cpp.cpp\") cat(\"C++ code compiled successfully!\\n\\n\")  # Run MCMC with high-quality settings cat(\"Starting high-quality MCMC run for me...\\n\") cat(\"This will take several hours. Progress will be saved every 5,000 iterations.\\n\\n\")  res <- run_line_painter(   image_path = image_path,   max_dimension = 1200,        # High resolution   iters = 100000,              # 100K iterations   out_dir = \"../inst/results/me_100k_high_quality\",   seed = 42,   auto_config = TRUE,          # Enable auto-configuration   verbose = TRUE )  cat(\"\\n🎉 MCMC completed successfully!\\n\") cat(\"===============================\\n\") cat(\"Final number of lines:\", length(res$lines), \"\\n\") cat(\"Best iteration:\", res$best$iter, \"\\n\") cat(\"Best SSE:\", round(res$best$sse, 2), \"\\n\")"},{"path":"https://dchodge.github.io/mcmcpainter/articles/me_mcmc_demo.html","id":"results-analysis","dir":"Articles","previous_headings":"Me MCMC Line Painting Demo","what":"📊 Results Analysis","title":"Me MCMC Line Painting Demo","text":"MCMC completes, let’s analyze results:","code":"# Load the final image with the same dimensions used in MCMC target_img <- load_image_rgb(image_path,                              out_w = dim(res$canvas)[2],                              out_h = dim(res$canvas)[1])  # Create default white canvas H <- dim(target_img)[1] W <- dim(target_img)[2] default_canvas <- array(1, dim = c(H, W, 3))  # Calculate performance metrics sse <- sum((target_img - res$best$canvas)^2) mse <- sse / length(target_img) psnr <- 20 * log10(1 / sqrt(mse))  cat(\"Performance Metrics:\\n\") cat(\"==================\\n\") cat(\"Best SSE:\", round(sse, 2), \"\\n\") cat(\"Best MSE:\", round(mse, 6), \"\\n\") cat(\"Best PSNR:\", round(psnr, 2), \"dB\\n\") cat(\"Number of lines:\", length(res$lines), \"\\n\") cat(\"Final dimensions:\", W, \"x\", H, \"\\n\\n\")  # Display optimization summary cat(\"Optimization Summary:\\n\") cat(\"====================\\n\") cat(\"Original dimensions:\", config$original_width, \"x\", config$original_height, \"\\n\") cat(\"Final dimensions:\", W, \"x\", H, \"\\n\") cat(\"Total iterations:\", 100000, \"\\n\") cat(\"Save frequency:\", 5000, \"\\n\") cat(\"PNG verification:\", ifelse(config$is_true_png, \"✓ True PNG\", \"✗ Not a true PNG\"), \"\\n\")"},{"path":"https://dchodge.github.io/mcmcpainter/articles/me_mcmc_demo.html","id":"triptych-visualization","dir":"Articles","previous_headings":"Me MCMC Line Painting Demo","what":"🎨 Triptych Visualization","title":"Me MCMC Line Painting Demo","text":"Create beautiful triptych showing progression white canvas final artwork:","code":"# Create triptych create_triptych(   default_canvas = default_canvas,   best_canvas = res$best$canvas,   target_img = target_img,   titles = c(\"Default (White Canvas)\", \"Best MCMC Result (100K steps)\", \"True Me Image\"),   main_title = \"Me Image: 100K MCMC Progression\" )  # Save triptych in multiple formats cat(\"Saving triptych...\\n\") output_dir <- \"../inst/results/me_100k_high_quality\"  # Save as PDF pdf_path <- file.path(output_dir, \"me_100k_triptych.pdf\") save_triptych(   default_canvas = default_canvas,   best_canvas = res$best$canvas,   target_img = target_img,   output_path = pdf_path,   width = 18, height = 7,  # Larger for high-quality output   titles = c(\"Default (White Canvas)\", \"Best MCMC Result (100K steps)\", \"True Me Image\"),   main_title = \"Me Image: 100K MCMC Progression\",   format = \"pdf\" )  # Save as PNG png_path <- file.path(output_dir, \"me_100k_triptych.png\") save_triptych(   default_canvas = default_canvas,   best_canvas = res$best$canvas,   target_img = target_img,   output_path = png_path,   width = 18, height = 7,  # Larger for high-quality output   titles = c(\"Default (White Canvas)\", \"Best MCMC Result (100K steps)\", \"True Me Image\"),   main_title = \"Me Image: 100K MCMC Progression\",   format = \"png\" )  cat(\"Triptych saved successfully!\\n\") cat(\"Files created:\\n\") cat(\"- PDF:\", pdf_path, \"\\n\") cat(\"- PNG:\", png_path, \"\\n\")"},{"path":"https://dchodge.github.io/mcmcpainter/articles/me_mcmc_demo.html","id":"output-files","dir":"Articles","previous_headings":"Me MCMC Line Painting Demo","what":"📁 Output Files","title":"Me MCMC Line Painting Demo","text":"MCMC run generate several output files:","code":"# List all saved iterations cat(\"Saved Iterations:\\n\") cat(\"=================\\n\") iter_files <- list.files(output_dir, pattern = \"iter_.*\\\\.png\", full.names = FALSE) iter_files <- sort(iter_files) for (file in iter_files) {   cat(\"-\", file, \"\\n\") }  cat(\"\\nFinal Output Files:\\n\") cat(\"==================\\n\") cat(\"- Best canvas: best_canvas.png\\n\") cat(\"- Final lines: final_lines.RData\\n\") cat(\"- Triptych PDF: me_100k_triptych.pdf\\n\") cat(\"- Triptych PNG: me_100k_triptych.png\\n\") cat(\"- Progress log: mcmc_progress.log\\n\")"},{"path":"https://dchodge.github.io/mcmcpainter/articles/me_mcmc_demo.html","id":"progression-analysis","dir":"Articles","previous_headings":"Me MCMC Line Painting Demo","what":"🔍 Progression Analysis","title":"Me MCMC Line Painting Demo","text":"Let’s examine MCMC progresses 100K iterations:","code":"# Load saved iterations for analysis library(png) library(grid)  # Function to load and display progression show_progression <- function(iterations = c(0, 25000, 50000, 75000, 100000)) {   par(mfrow = c(2, 3), mar = c(2, 2, 2, 1))      for (iter in iterations) {     if (iter == 0) {       # Show white canvas       img <- array(1, dim = c(H, W, 3))       title <- \"Iteration 0 (White)\"     } else {       # Load saved iteration       file_path <- file.path(output_dir, paste0(\"iter_\", sprintf(\"%06d\", iter), \".png\"))       if (file.exists(file_path)) {         img <- readPNG(file_path)         title <- paste(\"Iteration\", format(iter, big.mark = \",\"))       } else {         next       }     }          plot.new()     rasterImage(img, 0, 0, 1, 1)     title(title, cex.main = 0.8)   }      # Show target image   plot.new()   rasterImage(target_img, 0, 0, 1, 1)   title(\"Target Image\", cex.main = 0.8)      par(mfrow = c(1, 1)) }  # Display progression (if files exist) if (dir.exists(output_dir)) {   show_progression() }"},{"path":"https://dchodge.github.io/mcmcpainter/articles/me_mcmc_demo.html","id":"performance-comparison","dir":"Articles","previous_headings":"Me MCMC Line Painting Demo","what":"📈 Performance Comparison","title":"Me MCMC Line Painting Demo","text":"Compare results images:","code":"# Performance comparison table comparison_data <- data.frame(   Image = c(\"Me\", \"Butterfly\", \"Octopus\", \"Leaf\", \"Iamami\"),   Dimensions = c(     paste(config$scaled_width, \"x\", config$scaled_height),     \"2068 x 2091\",      \"964 x 900\",     \"800 x 1422\",     \"788 x 605\"   ),   Iterations = c(100000, 100000, 100000, 20000, 100000),   File_Size_KB = c(     round(config$file_size / 1024, 1),     4356,     380,     132,     336   ),   Complexity = c(     \"High (3.2MB)\",     \"Very High (4.3MB)\",     \"Medium (380KB)\",     \"Medium (132KB)\",      \"Medium (336KB)\"   ) )  knitr::kable(comparison_data,               caption = \"Performance Comparison Across Images\",              align = c('l', 'c', 'c', 'c', 'l'))"},{"path":[]},{"path":"https://dchodge.github.io/mcmcpainter/articles/me_mcmc_demo.html","id":"why-100k-iterations-for-me","dir":"Articles","previous_headings":"Me MCMC Line Painting Demo > 🎯 Key Insights","what":"Why 100K Iterations for Me?","title":"Me MCMC Line Painting Demo","text":"High Complexity: image likely intricate facial features details Large File Size: 3.2MB indicates rich texture color variation Fine Details: Facial features, hair, expressions require precise line placement Color Gradients: Skin tones lighting need many thin, overlapping strokes","code":""},{"path":"https://dchodge.github.io/mcmcpainter/articles/me_mcmc_demo.html","id":"expected-results","dir":"Articles","previous_headings":"Me MCMC Line Painting Demo > 🎯 Key Insights","what":"Expected Results","title":"Me MCMC Line Painting Demo","text":"Line Count: 1000-2000+ lines full detail Quality: Near-photorealistic line painting Convergence: Stable improvement 100K steps Memory: Efficient bounding box updates performance","code":""},{"path":"https://dchodge.github.io/mcmcpainter/articles/me_mcmc_demo.html","id":"running-the-full-demo","dir":"Articles","previous_headings":"Me MCMC Line Painting Demo","what":"🚀 Running the Full Demo","title":"Me MCMC Line Painting Demo","text":"run complete 100K MCMC demo:","code":"# Option 1: Run the vignette rmarkdown::render(\"vignettes/me_mcmc_demo.Rmd\")  # Option 2: Run directly in R source(\"vignettes/me_mcmc_demo.Rmd\")  # Option 3: Use the standalone script source(\"create_me_triptych.R\")"},{"path":"https://dchodge.github.io/mcmcpainter/articles/me_mcmc_demo.html","id":"further-reading","dir":"Articles","previous_headings":"Me MCMC Line Painting Demo","what":"📚 Further Reading","title":"Me MCMC Line Painting Demo","text":"Package Documentation: ?mcmcPainter Core Functions: ?run_line_painter, ?create_triptych Utilities: ?get_image_info, ?auto_configure_mcmc Vignettes: See image demos comparison Note: 100K MCMC run take 3-5 hours depending system. results show full artistic potential algorithm complex, personal images like ! 👤✨","code":""},{"path":"https://dchodge.github.io/mcmcpainter/articles/octopus_mcmc_demo.html","id":"octopus-mcmc-line-painting-demo","dir":"Articles","previous_headings":"","what":"Octopus MCMC Line Painting Demo","title":"Octopus MCMC Line Painting Demo","text":"vignette demonstrates complete workflow generating line paintings using mcmcPainter package, featuring fascinating octopus.png image 100,000 MCMC iterations maximum detail quality.","code":""},{"path":"https://dchodge.github.io/mcmcpainter/articles/octopus_mcmc_demo.html","id":"image-analysis","dir":"Articles","previous_headings":"Octopus MCMC Line Painting Demo","what":"🐙 Image Analysis","title":"Octopus MCMC Line Painting Demo","text":"First, let’s analyze octopus image understand characteristics:","code":"# Load package functions source(\"../R/mcmcPainter.R\") source(\"../R/mcmc_core.R\")  source(\"../R/utilities.R\")  # Analyze the octopus image image_path <- \"../inst/extdata/octopus.png\" cat(\"Analyzing image:\", basename(image_path), \"\\n\") ## Analyzing image: octopus.png cat(\"=====================================\\n\") ## ===================================== img_info <- get_image_info(image_path) cat(\"File:\", basename(image_path), \"\\n\") ## File: octopus.png cat(\"Original dimensions:\", img_info$width, \"x\", img_info$height, \"pixels\\n\") ## Original dimensions: 964 x 900 pixels cat(\"File size:\", round(img_info$file_size / 1024, 1), \"KB\\n\") ## File size: 380.1 KB cat(\"PNG verification:\", ifelse(img_info$is_true_png, \"✓ True PNG\", \"✗ Not a true PNG\"), \"\\n\") ## PNG verification: ✓ True PNG cat(\"Aspect ratio:\", round(img_info$width / img_info$height, 3), \"\\n\") ## Aspect ratio: 1.071 cat(\"Total pixels:\", format(img_info$width * img_info$height, big.mark = \",\"), \"\\n\\n\") ## Total pixels: 867,600 # Display the original image library(magick) octopus_img <- image_read(image_path) image_info <- image_info(octopus_img) cat(\"Magick image info:\\n\") ## Magick image info: cat(\"Dimensions:\", image_info$width, \"x\", image_info$height, \"\\n\") ## Dimensions: 964 x 900 cat(\"Format:\", image_info$format, \"\\n\") ## Format: PNG cat(\"Colorspace:\", image_info$colorspace, \"\\n\") ## Colorspace: sRGB cat(\"Filesize:\", round(image_info$filesize / 1024, 1), \"KB\\n\\n\") ## Filesize: 380.1 KB"},{"path":"https://dchodge.github.io/mcmcpainter/articles/octopus_mcmc_demo.html","id":"mcmc-configuration","dir":"Articles","previous_headings":"Octopus MCMC Line Painting Demo","what":"🎯 MCMC Configuration","title":"Octopus MCMC Line Painting Demo","text":"Now let’s configure MCMC parameters optimal performance octopus image:","code":"# High-quality configuration for 100K steps cat(\"High-Quality MCMC Configuration:\\n\") ## High-Quality MCMC Configuration: cat(\"================================\\n\") ## ================================ cat(\"Target iterations: 100,000\\n\") ## Target iterations: 100,000 cat(\"Save frequency: Every 5,000 iterations\\n\") ## Save frequency: Every 5,000 iterations cat(\"Max dimension: 1200 (high resolution)\\n\") ## Max dimension: 1200 (high resolution) cat(\"Expected runtime: 3-5 hours (depending on system)\\n\\n\") ## Expected runtime: 3-5 hours (depending on system) # Auto-configure MCMC parameters config <- auto_configure_mcmc(   image_path = image_path,   max_dimension = 1200,        # High resolution   target_iterations = 100000    # 100K iterations ) ## Image Analysis: ## ============== ## File: octopus.png  ## Original dimensions: 964 x 900 pixels ## File size: 380.1 KB ## PNG verification: ✓ True PNG  ##  ## Optimized MCMC Parameters: ## ========================== ## Scaled dimensions: 964 x 900 pixels ## Scaling factor: 1  ## Adjusted iterations: 116431  ## Save frequency: 5822 cat(\"Optimized MCMC Parameters:\\n\") ## Optimized MCMC Parameters: cat(\"==========================\\n\") ## ========================== cat(\"Original dimensions:\", config$original_width, \"x\", config$original_height, \"\\n\") ## Original dimensions: 964 x 900 cat(\"Scaled dimensions:\", config$scaled_width, \"x\", config$scaled_height, \"\\n\") ## Scaled dimensions: 964 x 900 cat(\"Scaling factor:\", round(config$scale_factor, 3), \"\\n\") ## Scaling factor: 1 cat(\"Adjusted iterations:\", format(config$iterations, big.mark = \",\"), \"\\n\") ## Adjusted iterations: 116,431 cat(\"Save frequency:\", format(config$save_every, big.mark = \",\"), \"\\n\") ## Save frequency: 5,822 cat(\"PNG verification:\", ifelse(config$is_true_png, \"✓ True PNG\", \"✗ Not a true PNG\"), \"\\n\\n\") ## PNG verification: ✓ True PNG # Calculate complexity metrics original_pixels <- config$original_width * config$original_height scaled_pixels <- config$scaled_width * config$scaled_height complexity_reduction <- (1 - scaled_pixels / original_pixels) * 100  cat(\"Complexity Analysis:\\n\") ## Complexity Analysis: cat(\"===================\\n\") ## =================== cat(\"Original pixels:\", format(original_pixels, big.mark = \",\"), \"\\n\") ## Original pixels: 867,600 cat(\"Scaled pixels:\", format(scaled_pixels, big.mark = \",\"), \"\\n\") ## Scaled pixels: 867,600 cat(\"Complexity reduction:\", round(complexity_reduction, 1), \"%\\n\") ## Complexity reduction: 0 % cat(\"Memory usage:\", round(scaled_pixels * 3 * 8 / 1024 / 1024, 1), \"MB\\n\\n\") ## Memory usage: 19.9 MB"},{"path":"https://dchodge.github.io/mcmcpainter/articles/octopus_mcmc_demo.html","id":"running-the-mcmc-algorithm","dir":"Articles","previous_headings":"Octopus MCMC Line Painting Demo","what":"🚀 Running the MCMC Algorithm","title":"Octopus MCMC Line Painting Demo","text":"Now let’s run MCMC algorithm generate line painting. take several hours 100K iterations:","code":"# Compile the C++ code for performance cat(\"Compiling C++ code...\\n\") Rcpp::sourceCpp(\"../src/mcmc_painter_cpp.cpp\") cat(\"C++ code compiled successfully!\\n\\n\")  # Run MCMC with high-quality settings cat(\"Starting high-quality MCMC run for octopus...\\n\") cat(\"This will take several hours. Progress will be saved every 5,000 iterations.\\n\\n\")  res <- run_line_painter(   image_path = image_path,   max_dimension = 1200,        # High resolution   iters = 100000,              # 100K iterations   out_dir = \"../inst/results/octopus_100k_high_quality\",   seed = 42,   auto_config = TRUE,          # Enable auto-configuration   verbose = TRUE )  cat(\"\\n🎉 MCMC completed successfully!\\n\") cat(\"===============================\\n\") cat(\"Final number of lines:\", length(res$lines), \"\\n\") cat(\"Best iteration:\", res$best$iter, \"\\n\") cat(\"Best SSE:\", round(res$best$sse, 2), \"\\n\")"},{"path":"https://dchodge.github.io/mcmcpainter/articles/octopus_mcmc_demo.html","id":"results-analysis","dir":"Articles","previous_headings":"Octopus MCMC Line Painting Demo","what":"📊 Results Analysis","title":"Octopus MCMC Line Painting Demo","text":"MCMC completes, let’s analyze results:","code":"# Load the final image with the same dimensions used in MCMC target_img <- load_image_rgb(image_path,                              out_w = dim(res$canvas)[2],                              out_h = dim(res$canvas)[1])  # Create default white canvas H <- dim(target_img)[1] W <- dim(target_img)[2] default_canvas <- array(1, dim = c(H, W, 3))  # Calculate performance metrics sse <- sum((target_img - res$best$canvas)^2) mse <- sse / length(target_img) psnr <- 20 * log10(1 / sqrt(mse))  cat(\"Performance Metrics:\\n\") cat(\"==================\\n\") cat(\"Best SSE:\", round(sse, 2), \"\\n\") cat(\"Best MSE:\", round(mse, 6), \"\\n\") cat(\"Best PSNR:\", round(psnr, 2), \"dB\\n\") cat(\"Number of lines:\", length(res$lines), \"\\n\") cat(\"Final dimensions:\", W, \"x\", H, \"\\n\\n\")  # Display optimization summary cat(\"Optimization Summary:\\n\") cat(\"====================\\n\") cat(\"Original dimensions:\", config$original_width, \"x\", config$original_height, \"\\n\") cat(\"Final dimensions:\", W, \"x\", H, \"\\n\") cat(\"Total iterations:\", 100000, \"\\n\") cat(\"Save frequency:\", 5000, \"\\n\") cat(\"PNG verification:\", ifelse(config$is_true_png, \"✓ True PNG\", \"✗ Not a true PNG\"), \"\\n\")"},{"path":"https://dchodge.github.io/mcmcpainter/articles/octopus_mcmc_demo.html","id":"triptych-visualization","dir":"Articles","previous_headings":"Octopus MCMC Line Painting Demo","what":"🎨 Triptych Visualization","title":"Octopus MCMC Line Painting Demo","text":"Create beautiful triptych showing progression white canvas final artwork:","code":"# Create triptych create_triptych(   default_canvas = default_canvas,   best_canvas = res$best$canvas,   target_img = target_img,   titles = c(\"Default (White Canvas)\", \"Best MCMC Result (100K steps)\", \"True Octopus Image\"),   main_title = \"Octopus Image: 100K MCMC Progression\" )  # Save triptych in multiple formats cat(\"Saving triptych...\\n\") output_dir <- \"../inst/results/octopus_100k_high_quality\"  # Save as PDF pdf_path <- file.path(output_dir, \"octopus_100k_triptych.pdf\") save_triptych(   default_canvas = default_canvas,   best_canvas = res$best$canvas,   target_img = target_img,   output_path = pdf_path,   width = 18, height = 7,  # Larger for high-quality output   titles = c(\"Default (White Canvas)\", \"Best MCMC Result (100K steps)\", \"True Octopus Image\"),   main_title = \"Octopus Image: 100K MCMC Progression\",   format = \"pdf\" )  # Save as PNG png_path <- file.path(output_dir, \"octopus_100k_triptych.png\") save_triptych(   default_canvas = default_canvas,   best_canvas = res$best$canvas,   target_img = target_img,   output_path = png_path,   width = 18, height = 7,  # Larger for high-quality output   titles = c(\"Default (White Canvas)\", \"Best MCMC Result (100K steps)\", \"True Octopus Image\"),   main_title = \"Octopus Image: 100K MCMC Progression\",   format = \"png\" )  cat(\"Triptych saved successfully!\\n\") cat(\"Files created:\\n\") cat(\"- PDF:\", pdf_path, \"\\n\") cat(\"- PNG:\", png_path, \"\\n\")"},{"path":"https://dchodge.github.io/mcmcpainter/articles/octopus_mcmc_demo.html","id":"output-files","dir":"Articles","previous_headings":"Octopus MCMC Line Painting Demo","what":"📁 Output Files","title":"Octopus MCMC Line Painting Demo","text":"MCMC run generate several output files:","code":"# List all saved iterations cat(\"Saved Iterations:\\n\") cat(\"=================\\n\") iter_files <- list.files(output_dir, pattern = \"iter_.*\\\\.png\", full.names = FALSE) iter_files <- sort(iter_files) for (file in iter_files) {   cat(\"-\", file, \"\\n\") }  cat(\"\\nFinal Output Files:\\n\") cat(\"==================\\n\") cat(\"- Best canvas: best_canvas.png\\n\") cat(\"- Final lines: final_lines.RData\\n\") cat(\"- Triptych PDF: octopus_100k_triptych.pdf\\n\") cat(\"- Triptych PNG: octopus_100k_triptych.png\\n\") cat(\"- Progress log: mcmc_progress.log\\n\")"},{"path":"https://dchodge.github.io/mcmcpainter/articles/octopus_mcmc_demo.html","id":"progression-analysis","dir":"Articles","previous_headings":"Octopus MCMC Line Painting Demo","what":"🔍 Progression Analysis","title":"Octopus MCMC Line Painting Demo","text":"Let’s examine MCMC progresses 100K iterations:","code":"# Load saved iterations for analysis library(png) library(grid)  # Function to load and display progression show_progression <- function(iterations = c(0, 25000, 50000, 75000, 100000)) {   par(mfrow = c(2, 3), mar = c(2, 2, 2, 1))      for (iter in iterations) {     if (iter == 0) {       # Show white canvas       img <- array(1, dim = c(H, W, 3))       title <- \"Iteration 0 (White)\"     } else {       # Load saved iteration       file_path <- file.path(output_dir, paste0(\"iter_\", sprintf(\"%06d\", iter), \".png\"))       if (file.exists(file_path)) {         img <- readPNG(file_path)         title <- paste(\"Iteration\", format(iter, big.mark = \",\"))       } else {         next       }     }          plot.new()     rasterImage(img, 0, 0, 1, 1)     title(title, cex.main = 0.8)   }      # Show target image   plot.new()   rasterImage(target_img, 0, 0, 1, 1)   title(\"Target Image\", cex.main = 0.8)      par(mfrow = c(1, 1)) }  # Display progression (if files exist) if (dir.exists(output_dir)) {   show_progression() }"},{"path":"https://dchodge.github.io/mcmcpainter/articles/octopus_mcmc_demo.html","id":"performance-comparison","dir":"Articles","previous_headings":"Octopus MCMC Line Painting Demo","what":"📈 Performance Comparison","title":"Octopus MCMC Line Painting Demo","text":"Compare octopus results images:","code":"# Performance comparison table comparison_data <- data.frame(   Image = c(\"Octopus\", \"Butterfly\", \"Leaf\", \"Iamami\"),   Dimensions = c(     paste(config$scaled_width, \"x\", config$scaled_height),     \"2068 x 2091\",      \"800 x 1422\",     \"788 x 605\"   ),   Iterations = c(100000, 100000, 20000, 100000),   File_Size_KB = c(     round(config$file_size / 1024, 1),     4356,     132,     336   ),   Complexity = c(     \"Medium (380KB)\",     \"Very High (4.3MB)\",     \"Medium (132KB)\",      \"Medium (336KB)\"   ) )  knitr::kable(comparison_data,               caption = \"Performance Comparison Across Images\",              align = c('l', 'c', 'c', 'c', 'l'))"},{"path":[]},{"path":"https://dchodge.github.io/mcmcpainter/articles/octopus_mcmc_demo.html","id":"why-100k-iterations-for-octopus","dir":"Articles","previous_headings":"Octopus MCMC Line Painting Demo > 🎯 Key Insights","what":"Why 100K Iterations for Octopus?","title":"Octopus MCMC Line Painting Demo","text":"Complex Tentacles: octopus intricate, flowing tentacles require precise line placement Texture Details: Suckers skin texture need many fine strokes Color Gradients: Smooth transitions octopus body require overlapping lines Organic Shapes: Natural curves organic forms benefit high iteration counts","code":""},{"path":"https://dchodge.github.io/mcmcpainter/articles/octopus_mcmc_demo.html","id":"expected-results","dir":"Articles","previous_headings":"Octopus MCMC Line Painting Demo > 🎯 Key Insights","what":"Expected Results","title":"Octopus MCMC Line Painting Demo","text":"Line Count: 800-1500+ lines full detail Quality: Near-photorealistic line painting Convergence: Stable improvement 100K steps Memory: Efficient bounding box updates performance","code":""},{"path":"https://dchodge.github.io/mcmcpainter/articles/octopus_mcmc_demo.html","id":"running-the-full-demo","dir":"Articles","previous_headings":"Octopus MCMC Line Painting Demo","what":"🚀 Running the Full Demo","title":"Octopus MCMC Line Painting Demo","text":"run complete 100K MCMC demo:","code":"# Option 1: Run the vignette rmarkdown::render(\"vignettes/octopus_mcmc_demo.Rmd\")  # Option 2: Run directly in R source(\"vignettes/octopus_mcmc_demo.Rmd\")  # Option 3: Use the standalone script source(\"create_octopus_triptych.R\")"},{"path":"https://dchodge.github.io/mcmcpainter/articles/octopus_mcmc_demo.html","id":"further-reading","dir":"Articles","previous_headings":"Octopus MCMC Line Painting Demo","what":"📚 Further Reading","title":"Octopus MCMC Line Painting Demo","text":"Package Documentation: ?mcmcPainter Core Functions: ?run_line_painter, ?create_triptych Utilities: ?get_image_info, ?auto_configure_mcmc Vignettes: See image demos comparison Note: 100K MCMC run take 3-5 hours depending system. results show full artistic potential algorithm complex, organic images like octopus! 🐙✨","code":""},{"path":"https://dchodge.github.io/mcmcpainter/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Hodgson. Author, maintainer.","code":""},{"path":"https://dchodge.github.io/mcmcpainter/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hodgson D (2025). mcmcPainter: MCMC-Based Artistic Line Dot Painting Generation. R package version 1.0.0, https://github.com/davidhodgson/mcmcPainter.","code":"@Manual{,   title = {mcmcPainter: MCMC-Based Artistic Line and Dot Painting Generation},   author = {David Hodgson},   year = {2025},   note = {R package version 1.0.0},   url = {https://github.com/davidhodgson/mcmcPainter}, }"},{"path":"https://dchodge.github.io/mcmcpainter/index.html","id":"mcmcpainter","dir":"","previous_headings":"","what":"MCMC-Based Artistic Line and Dot Painting Generation","title":"MCMC-Based Artistic Line and Dot Painting Generation","text":"MCMC-Based Artistic Line Dot Painting Generation Transform image line-based pointillism-style artwork using Reversible Jump MCMC algorithms. R package combines statistical optimization digital art generation create stunning artistic interpretations photographs.","code":""},{"path":"https://dchodge.github.io/mcmcpainter/index.html","id":"visual-example","dir":"","previous_headings":"","what":"Visual Example","title":"MCMC-Based Artistic Line and Dot Painting Generation","text":"’s example MCMC line painting algorithm action, showing complete transformation white canvas detailed portrait: Complete progression white canvas final artwork 100,000 iterations","code":""},{"path":"https://dchodge.github.io/mcmcpainter/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"MCMC-Based Artistic Line and Dot Painting Generation","text":"mcmcPainter uses advanced Markov Chain Monte Carlo (MCMC) techniques iteratively build artwork adding, removing, modifying artistic elements (lines dots) result closely matches target image. algorithm intelligently explores space possible artworks, gradually improving match statistical optimization.","code":""},{"path":"https://dchodge.github.io/mcmcpainter/index.html","id":"key-features","dir":"","previous_headings":"","what":"Key Features","title":"MCMC-Based Artistic Line and Dot Painting Generation","text":"🎨 Dual Art Styles: Generate line-based dot-based (pointillism) artwork ⚡ High Performance: C++ optimized core functions fast MCMC sampling 🖼️ Flexible Input: Supports various image formats (PNG, JPEG, etc.) 📐 Smart Scaling: Automatic image analysis parameter optimization 📊 Progress Tracking: Saves intermediate results every N iterations 🎯 Quality Control: PNG verification intelligent parameter tuning 📦 Professional Package: Full R package structure comprehensive documentation","code":""},{"path":"https://dchodge.github.io/mcmcpainter/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"MCMC-Based Artistic Line and Dot Painting Generation","text":"","code":"# Install dependencies install.packages(c(\"Rcpp\", \"magick\", \"png\", \"knitr\", \"rmarkdown\"))  # Clone the repository # git clone https://github.com/davidhodgson/mcmcPainter.git  # Load the package source(\"R/mcmcPainter.R\") source(\"R/mcmc_core.R\")  source(\"R/utilities.R\")  # Compile C++ code Rcpp::sourceCpp(\"src/mcmc_painter_cpp.cpp\")"},{"path":[]},{"path":"https://dchodge.github.io/mcmcpainter/index.html","id":"line-painting","dir":"","previous_headings":"Quick Start","what":"Line Painting","title":"MCMC-Based Artistic Line and Dot Painting Generation","text":"","code":"# Generate line painting res <- run_line_painter(   image_path = \"inst/extdata/leaf_converted.png\",   iters = 10000,   out_dir = \"inst/results/my_artwork\" )  # Create visualization create_triptych(   default_canvas = array(1, dim = c(800, 1422, 3)),   best_canvas = res$best$canvas,   target_img = load_image_rgb(\"inst/extdata/leaf_converted.png\", 800, 1422) )"},{"path":"https://dchodge.github.io/mcmcpainter/index.html","id":"dot-painting-pointillism","dir":"","previous_headings":"Quick Start","what":"Dot Painting (Pointillism)","title":"MCMC-Based Artistic Line and Dot Painting Generation","text":"","code":"# Generate dot painting res <- run_dot_painter(   image_path = \"inst/extdata/leaf_converted.png\",   iters = 10000,   out_dir = \"inst/results/my_dot_artwork\" )  # Create dot triptych create_dot_triptych(   default_canvas = array(1, dim = c(800, 1422, 3)),   best_canvas = res$best$canvas,   target_img = load_image_rgb(\"inst/extdata/leaf_converted.png\", 800, 1422) )"},{"path":[]},{"path":"https://dchodge.github.io/mcmcpainter/index.html","id":"the-mcmc-algorithm","dir":"","previous_headings":"How It Works","what":"The MCMC Algorithm","title":"MCMC-Based Artistic Line and Dot Painting Generation","text":"package implements Reversible Jump MCMC algorithm four types moves: Birth: Add new artistic elements (lines dots) based image residuals Death: Remove existing elements Jitter: Perturb element parameters (position, color, opacity, size) Swap: Reorder element rendering better composition","code":""},{"path":"https://dchodge.github.io/mcmcpainter/index.html","id":"line-painting-algorithm","dir":"","previous_headings":"How It Works","what":"Line Painting Algorithm","title":"MCMC-Based Artistic Line and Dot Painting Generation","text":"line-based artwork, line defined : - Position: Start end coordinates (x1, y1, x2, y2) - Color: RGB values (r, g, b) - Opacity: Alpha transparency (0-1) - Thickness: Line width pixels algorithm uses data-driven birth proposals, sampling new lines areas high image residuals focus important features.","code":""},{"path":"https://dchodge.github.io/mcmcpainter/index.html","id":"dot-painting-algorithm","dir":"","previous_headings":"How It Works","what":"Dot Painting Algorithm","title":"MCMC-Based Artistic Line and Dot Painting Generation","text":"pointillism-style artwork, dot defined : - Position: Center coordinates (x, y) - Color: RGB values (r, g, b) - Opacity: Alpha transparency (0-1) - Radius: Dot size pixels algorithm creates pointillism effects strategically placing dots varying sizes opacities.","code":""},{"path":"https://dchodge.github.io/mcmcpainter/index.html","id":"performance-optimization","dir":"","previous_headings":"How It Works","what":"Performance Optimization","title":"MCMC-Based Artistic Line and Dot Painting Generation","text":"C++ Implementation: Core rendering functions written C++ 3-20x speedup Bounding Box Optimization: re-renders affected regions efficiency Adaptive Temperature: Gradually increases exploration balance quality speed Memory Management: Efficient array operations memory usage","code":""},{"path":"https://dchodge.github.io/mcmcpainter/index.html","id":"package-structure","dir":"","previous_headings":"","what":"Package Structure","title":"MCMC-Based Artistic Line and Dot Painting Generation","text":"","code":"mcmcPainter/ ├── R/                     # R source code │   ├── mcmcPainter.R     # Main package functions │   ├── mcmc_core.R       # Core MCMC algorithm │   ├── utilities.R       # Utility functions │   └── dot_mcmc_core.R   # Dot painting algorithm ├── src/                   # C++ optimization code │   ├── mcmc_painter_cpp.cpp │   └── dot_painter_cpp.cpp ├── vignettes/             # Documentation and examples │   ├── mcmcPainter_demo.Rmd │   ├── leaf_mcmc_demo.Rmd │   ├── iamami_mcmc_demo.Rmd │   ├── butterfly_mcmc_demo.Rmd │   ├── octopus_mcmc_demo.Rmd │   └── me_mcmc_demo.Rmd ├── inst/extdata/          # Sample images ├── inst/results/          # Generated artwork examples └── create/                # Standalone execution scripts"},{"path":[]},{"path":"https://dchodge.github.io/mcmcpainter/index.html","id":"line-painting-1","dir":"","previous_headings":"Main Functions","what":"Line Painting","title":"MCMC-Based Artistic Line and Dot Painting Generation","text":"run_line_painter(): Main function generate line paintings create_triptych(): Create /visualizations save_triptych(): Save triptychs PDF/PNG","code":""},{"path":"https://dchodge.github.io/mcmcpainter/index.html","id":"dot-painting","dir":"","previous_headings":"Main Functions","what":"Dot Painting","title":"MCMC-Based Artistic Line and Dot Painting Generation","text":"run_dot_painter(): Main function generate dot paintings create_dot_triptych(): Create dot painting visualizations save_dot_triptych(): Save dot triptychs PDF/PNG","code":""},{"path":"https://dchodge.github.io/mcmcpainter/index.html","id":"utilities","dir":"","previous_headings":"Main Functions","what":"Utilities","title":"MCMC-Based Artistic Line and Dot Painting Generation","text":"load_image_rgb(): Load resize target images save_png(): Save generated artwork view_rgb(): Display images get_image_info(): Analyze image properties auto_configure_mcmc(): Optimize parameters automatically","code":""},{"path":[]},{"path":"https://dchodge.github.io/mcmcpainter/index.html","id":"high-quality-line-painting-portrait-progression","dir":"","previous_headings":"Examples","what":"High-Quality Line Painting: Portrait Progression","title":"MCMC-Based Artistic Line and Dot Painting Generation","text":"’s stunning example MCMC line painting algorithm action, showing progression white canvas detailed portrait 100,000 iterations: example demonstrates algorithm’s ability capture fine facial details, hair texture, subtle shading strategic line placement optimization.","code":""},{"path":"https://dchodge.github.io/mcmcpainter/index.html","id":"additional-examples","dir":"","previous_headings":"Examples","what":"Additional Examples","title":"MCMC-Based Artistic Line and Dot Painting Generation","text":"package includes several example images pre-generated results: Leaf: Botanical line artwork (132KB image) Iamami: Portrait auto-configuration (336KB image) Butterfly: High-detail 100K iteration run (4.2MB image) Octopus: Marine life pointillism (380KB image) Portrait: Personal photo artwork (3.2MB image)","code":""},{"path":"https://dchodge.github.io/mcmcpainter/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"MCMC-Based Artistic Line and Dot Painting Generation","text":"Comprehensive tutorials available: Complete Demo: Full package functionality walkthrough Leaf Tutorial: Step--step line painting example Iamami Tutorial: Auto-configuration optimization High-Quality Examples: 100K iteration demonstrations","code":""},{"path":"https://dchodge.github.io/mcmcpainter/index.html","id":"performance","dir":"","previous_headings":"","what":"Performance","title":"MCMC-Based Artistic Line and Dot Painting Generation","text":"Speed: 3-20x faster pure R implementation Scalability: Handles images 2000x2000 pixels Memory: Efficient memory usage large images Quality: Adaptive algorithms ensure optimal results","code":""},{"path":"https://dchodge.github.io/mcmcpainter/index.html","id":"requirements","dir":"","previous_headings":"","what":"Requirements","title":"MCMC-Based Artistic Line and Dot Painting Generation","text":"R >= 4.0.0 Rcpp magick png knitr (vignettes) rmarkdown (documentation)","code":""},{"path":"https://dchodge.github.io/mcmcpainter/index.html","id":"output-structure","dir":"","previous_headings":"","what":"Output Structure","title":"MCMC-Based Artistic Line and Dot Painting Generation","text":"MCMC run creates: - iter_000000.png: Initial white canvas - iter_001000.png: 1,000 iterations - iter_002000.png: 2,000 iterations - ... - final.png: Final result - best_iter_XXXXXX.png: Best iteration found","code":""},{"path":"https://dchodge.github.io/mcmcpainter/index.html","id":"applications","dir":"","previous_headings":"","what":"Applications","title":"MCMC-Based Artistic Line and Dot Painting Generation","text":"Digital Art: Create unique artistic interpretations photos Educational: Demonstrate MCMC algorithms optimization Research: Explore algorithmic art computational creativity Entertainment: Generate personalized artwork family photos","code":""},{"path":"https://dchodge.github.io/mcmcpainter/index.html","id":"technical-details","dir":"","previous_headings":"","what":"Technical Details","title":"MCMC-Based Artistic Line and Dot Painting Generation","text":"package uses advanced statistical techniques: Reversible Jump MCMC: variable-dimension parameter spaces Data-Driven Proposals: Intelligent birth moves based image residuals Adaptive Temperature: Dynamic exploration-exploitation balance Alpha Compositing: Proper color blending realistic effects Bounding Box Optimization: Efficient rendering updates","code":""},{"path":"https://dchodge.github.io/mcmcpainter/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"MCMC-Based Artistic Line and Dot Painting Generation","text":"MIT License - see LICENSE file details.","code":""},{"path":"https://dchodge.github.io/mcmcpainter/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"MCMC-Based Artistic Line and Dot Painting Generation","text":"Contributions welcome! Please feel free submit issues, feature requests, pull requests.","code":""},{"path":"https://dchodge.github.io/mcmcpainter/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"MCMC-Based Artistic Line and Dot Painting Generation","text":"use package research, please cite: Transform images algorithmic art power MCMC optimization! 🎨⚡","code":"@software{mcmcPainter,   title = {mcmcPainter: MCMC-Based Artistic Line and Dot Painting Generation},   author = {David Hodgson},   year = {2024},   url = {https://github.com/davidhodgson/mcmcPainter} }"},{"path":"https://dchodge.github.io/mcmcpainter/reference/mcmcPainter-package.html","id":null,"dir":"Reference","previous_headings":"","what":"MCMC Line Painting Art Generation — mcmcPainter-package","title":"MCMC Line Painting Art Generation — mcmcPainter-package","text":"Generate artistic line paintings using Reversible Jump MCMC algorithms automatic image analysis parameter optimization. Creates beautiful line-based artwork target images iterative optimization line parameters.","code":""},{"path":"https://dchodge.github.io/mcmcpainter/reference/mcmcPainter-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MCMC Line Painting Art Generation — mcmcPainter-package","text":"package provides functions : Load analyze target images automatic dimension detection Verify PNG files detect renamed image files Auto-configure MCMC parameters optimal performance Run MCMC algorithms generate line paintings Create beautiful triptych visualizations Save results multiple formats Key functions: run_line_painter: Main function auto-configuration auto_configure_mcmc: Intelligent parameter optimization get_image_info: Image analysis PNG verification create_triptych: Create triptych visualizations save_triptych: Save triptychs files load_image_rgb: Load resize images save_png: Save images PNG format view_rgb: Display RGB arrays images","code":""},{"path":"https://dchodge.github.io/mcmcpainter/reference/mcmcPainter-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"MCMC Line Painting Art Generation — mcmcPainter-package","text":"David Hodgson <david@example.com>","code":""},{"path":"https://dchodge.github.io/mcmcpainter/reference/mcmcPainter-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"MCMC Line Painting Art Generation — mcmcPainter-package","text":"Reversible Jump MCMC algorithms line-based artwork generation.","code":""}]
